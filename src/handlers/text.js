import DB from '../database.js';
import { getMessages } from '../messages.js';
import config from '../config.js';
import { extractCodes } from '../utils/validators.js';
import { pluralize } from '../utils/helpers.js';

export function registerTextHandlers(bot) {
  bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    
    const user = await DB.getUser(userId);
    const MESSAGES = getMessages(user?.language || 'ru');
    
    // –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    if (text.startsWith('/') && userId === config.telegram.adminId) {
      if (text.startsWith('/addcodes ')) {
        return handleAdminAddCodes(ctx, text, user?.language || 'ru');
      }
      if (text.startsWith('/removecode ')) {
        return handleAdminRemoveCode(ctx, text, user?.language || 'ru');
      }
      if (text === '/clearpool') {
        return handleClearPool(ctx, user?.language || 'ru');
      }
      if (text === '/clearqueue') {
        return handleClearQueue(ctx, user?.language || 'ru');
      }
      if (text === '/resetall') {
        return handleResetAll(ctx, user?.language || 'ru');
      }
      if (text.startsWith('/finduser ')) {
        return handleFindUser(ctx, text);
      }
      if (text.startsWith('/ban ')) {
        return handleBan(ctx, text);
      }
      if (text.startsWith('/unban ')) {
        return handleUnban(ctx, text);
      }
      if (text === '/poolsize') {
        return handlePoolSize(ctx, user?.language || 'ru');
      }
      if (text === '/queuesize') {
        return handleQueueSize(ctx, user?.language || 'ru');
      }
      if (text.startsWith('/broadcast ')) {
        return handleBroadcast(ctx, text, bot);
      }
      if (text === '/requesthelp') {
        return handleRequestHelp(ctx, bot);
      }
      if (text === '/adminstat') {
        return handleAdminStat(ctx);
      }
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ (start, stats, help, language) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ commands.js
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ commands.js)
    if (text.startsWith('/')) {
      return;
    }
    
    if (!user) {
      return ctx.reply(MESSAGES.notInSystem, { parse_mode: 'Markdown' });
    }
    
    // –£–ü–†–û–©–Å–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Ç–æ–ª—å–∫–æ 3 —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    // 1. –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if (user.awaiting_unused_return === true) {
      return handleUnusedReturn(ctx, user);
    }
    
    // 2. –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if (user.awaiting_donation === true || user.awaiting_donation_usage === true) {
      return handleDonation(ctx, user);
    }
    
    // 3. –û–±—ã—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–æ–≤ (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç –∏ –µ—â—ë –Ω–µ –≤–µ—Ä–Ω—É–ª)
    if (user.status === 'received' && user.codes_returned === 0) {
      return handleCodeSubmission(ctx, user);
    }
  });
}

async function handleCodeSubmission(ctx, user) {
  const text = ctx.message.text;
  const codes = extractCodes(text);
  
  const MESSAGES = getMessages(user.language || 'ru');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
  if (user.is_banned) {
    return ctx.reply(
      `üö´ –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${user.ban_reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª'}`,
      { parse_mode: 'Markdown' }
    );
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –±—ã–ª–∏ –ª–∏ –∂–∞–ª–æ–±—ã –Ω–∞ –∫–æ–¥—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const allUsers = await DB.getAllUsers();
  const complaintsOnUserCodes = allUsers.filter(u => 
    u.invalid_codes_reported?.some(reportedCode => 
      user.codes_submitted?.includes(reportedCode)
    )
  ).length;
  
  if (complaintsOnUserCodes >= 2) {
    return ctx.reply(
      `üö´ –ù–∞ —Ç–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–¥—ã –ø–æ—Å—Ç—É–ø–∏–ª–∏ –∂–∞–ª–æ–±—ã.\n\n–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã!`,
      { parse_mode: 'Markdown' }
    );
  }
  
  if (codes.length === 0) {
    return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–¥ –∏–∑ Sora (6 —Å–∏–º–≤–æ–ª–æ–≤).', { 
      parse_mode: 'Markdown' 
    });
  }
  
  const code = codes[0]; // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∫–æ–¥
  const botGivenCode = user.invite_code_given?.toUpperCase();
  
  // –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫–æ–¥ –æ—Ç –±–æ—Ç–∞ –±–ª–æ–∫–∏—Ä—É–µ–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º
  if (botGivenCode && code === botGivenCode) {
    return ctx.reply(
      `‚ö†Ô∏è –≠—Ç–æ –∫–æ–¥ –æ—Ç –±–æ—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: \`${botGivenCode}\`\n\n` +
      `–ù—É–∂–µ–Ω –∫–æ–¥ –æ—Ç Sora –ü–û–°–õ–ï —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`,
      { parse_mode: 'Markdown' }
    );
  }
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    await DB.updateUser(user.telegram_id, {
      pending_code: code,
      awaiting_usage_choice: true,
      awaiting_codes: false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    });
    
    await ctx.reply(MESSAGES.chooseUsageCount(code), {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: MESSAGES.buttons.usage1, callback_data: 'usage_1' }],
          [{ text: MESSAGES.buttons.usage2, callback_data: 'usage_2' }],
          [{ text: MESSAGES.buttons.usage3, callback_data: 'usage_3' }],
          [{ text: MESSAGES.buttons.usage4, callback_data: 'usage_4' }]
        ]
      }
    });
  } catch (error) {
    console.error('Error processing code:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
  }
}

async function handleDonation(ctx, user) {
  const text = ctx.message.text;
  const codes = extractCodes(text);
  
  const MESSAGES = getMessages(user.language || 'ru');
  
  if (codes.length === 0) {
    return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥.', { parse_mode: 'Markdown' });
  }
  
  try {
    const code = codes[0];
    
    await DB.updateUser(user.telegram_id, {
      pending_donation_code: code,
      awaiting_donation: false,
      awaiting_donation_usage: true
    });
    
    await ctx.reply(MESSAGES.chooseUsageCount(code), {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: MESSAGES.buttons.usage1, callback_data: 'donation_usage_1' }],
          [{ text: MESSAGES.buttons.usage2, callback_data: 'donation_usage_2' }],
          [{ text: MESSAGES.buttons.usage3, callback_data: 'donation_usage_3' }],
          [{ text: MESSAGES.buttons.usage4, callback_data: 'donation_usage_4' }]
        ]
      }
    });
  } catch (error) {
    console.error('Error processing donation:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞.');
  }
}

async function handleUnusedReturn(ctx, user) {
  const text = ctx.message.text;
  const codes = extractCodes(text);
  
  const MESSAGES = getMessages(user.language || 'ru');
  
  if (codes.length === 0) {
    return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥.', { parse_mode: 'Markdown' });
  }
  
  const ownCode = user.invite_code_given?.toUpperCase();
  const returnedCode = codes[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –µ–≥–æ –∫–æ–¥ –æ—Ç –±–æ—Ç–∞
  if (returnedCode !== ownCode) {
    return ctx.reply(
      `‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–π –∫–æ–¥ –æ—Ç –±–æ—Ç–∞.\n\n–¢–≤–æ–π –∫–æ–¥: \`${ownCode}\`\n–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª: \`${returnedCode}\``,
      { parse_mode: 'Markdown' }
    );
  }
  
  try {
    const addedCount = await DB.addCodesToPoolWithLimit(returnedCode, `unused:${user.telegram_id}`, 1);
    
    if (addedCount === 0) {
      await DB.updateUser(user.telegram_id, { awaiting_unused_return: false });
      return ctx.reply('‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –≤ –ø—É–ª–µ', { parse_mode: 'Markdown' });
    }
    
    await DB.updateUser(user.telegram_id, {
      status: 'returned_unused',
      awaiting_unused_return: false,
      codes_returned: 0
    });
    
    await ctx.reply(MESSAGES.unusedReturned(returnedCode, user.language), {
      parse_mode: 'Markdown'
    });
    
    try {
      await ctx.telegram.sendMessage(
        config.telegram.adminId,
        `‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç @${user.username}\n–ö–æ–¥: ${returnedCode}`
      );
    } catch (error) {
      console.error('Admin notification failed:', error.message);
    }
  } catch (error) {
    console.error('Error processing unused return:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞.');
  }
}

async function handleAdminAddCodes(ctx, text, language) {
  const params = text.replace('/addcodes ', '').trim();
  const parts = params.split(/\s+/);
  
  if (parts.length === 0) {
    return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /addcodes –ö–û–î [–ö–û–õ–ò–ß–ï–°–¢–í–û]\n–ü—Ä–∏–º–µ—Ä: /addcodes ABC123 2');
  }
  
  const lastPart = parts[parts.length - 1];
  let usageCount = 1;
  let codeText = params;
  
  if (/^\d+$/.test(lastPart)) {
    usageCount = parseInt(lastPart);
    if (usageCount < 1 || usageCount > 4) {
      return ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1-4');
    }
    codeText = parts.slice(0, -1).join(' ');
  }
  
  const codes = extractCodes(codeText);
  
  if (codes.length === 0) {
    return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥');
  }
  
  const code = codes[0];
  const addedCount = await DB.addCodesToPoolWithLimit(code, 'admin', usageCount);
  
  if (addedCount === 0) {
    return ctx.reply(`‚ùå –ö–æ–¥ ${code} —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç (4 –º–∞–∫—Å)`);
  }
  
  return ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω:\n–ö–æ–¥: \`${code}\`\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${addedCount}`, {
    parse_mode: 'Markdown'
  });
}

async function handleAdminRemoveCode(ctx, text, language) {
  const code = text.replace('/removecode ', '').trim().toUpperCase();
  
  if (!code || code.length < 5) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏ –∫–æ–¥');
  }
  
  const removed = await DB.removeCodeFromPool(code);
  
  if (removed) {
    return ctx.reply(`‚úÖ –£–¥–∞–ª—ë–Ω: \`${code}\``, { parse_mode: 'Markdown' });
  } else {
    return ctx.reply(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: \`${code}\``, { parse_mode: 'Markdown' });
  }
}

async function handleClearPool(ctx, language) {
  const count = await DB.clearAllAvailableCodes();
  return ctx.reply(`‚úÖ –û—á–∏—â–µ–Ω–æ ${count} ${pluralize(count, '–∫–æ–¥', '–∫–æ–¥–∞', '–∫–æ–¥–æ–≤', language)} –∏–∑ –ø—É–ª–∞`);
}

async function handleClearQueue(ctx, language) {
  const count = await DB.clearQueue();
  return ctx.reply(`‚úÖ –û—á–∏—â–µ–Ω–æ ${count} ${pluralize(count, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', language)} –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
}

async function handleResetAll(ctx, language) {
  await ctx.reply('‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ. –£–≤–µ—Ä–µ–Ω? –û—Ç–ø—Ä–∞–≤—å /confirmedreset');
}

async function handleBan(ctx, text) {
  const params = text.replace('/ban ', '').trim();
  const parts = params.split(' ');
  const username = parts[0];
  const reason = parts.slice(1).join(' ') || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª';
  
  if (!username) {
    return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /ban @username –ø—Ä–∏—á–∏–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /ban @user123 –§–µ–π–∫–æ–≤—ã–µ –∫–æ–¥—ã');
  }
  
  const user = await DB.getUserByUsername(username);
  
  if (!user) {
    return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  await DB.banUser(user.telegram_id, reason);
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –≤ username
  const safeUsername = user.username.replace(/_/g, '\\_');
  
  return ctx.reply(`‚úÖ –ó–∞–±–∞–Ω–µ–Ω: @${safeUsername}\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`, { 
    parse_mode: 'Markdown' 
  });
}

async function handleUnban(ctx, text) {
  const username = text.replace('/unban ', '').trim();
  
  if (!username) {
    return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /unban @username');
  }
  
  const user = await DB.getUserByUsername(username);
  
  if (!user) {
    return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  await DB.unbanUser(user.telegram_id);
  
  const safeUsername = user.username.replace(/_/g, '\\_');
  
  return ctx.reply(`‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω: @${safeUsername}`, {
    parse_mode: 'Markdown'
  });
}

async function handleFindUser(ctx, text) {
  const userId = text.replace('/finduser ', '').trim();
  
  if (!userId) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏ ID: /finduser 12345');
  }
  
  const user = await DB.getUser(userId);
  
  if (!user) {
    return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  const queuePos = await DB.getQueuePosition(userId);
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ username
  const safeUsername = user.username.replace(/_/g, '\\_');
  
  const info = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

ID: \`${user.telegram_id}\`
Username: @${safeUsername}
–°—Ç–∞—Ç—É—Å: ${user.status}
–û—á–µ—Ä–µ–¥—å: ${queuePos || '-'}
${user.is_banned ? `\nüö´ –ó–ê–ë–ê–ù–ï–ù: ${user.ban_reason}` : ''}

–ü–æ–ª—É—á–∏–ª –∫–æ–¥: ${user.invite_code_given || '-'}
–í–µ—Ä–Ω—É–ª: ${user.codes_returned}
–ò–Ω–≤–∞–π—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${user.invites_received_count || 0}`;

  return ctx.reply(info, { parse_mode: 'Markdown' });
}

async function handlePoolSize(ctx, language) {
  const size = await DB.getPoolSize();
  return ctx.reply(`üíé –ö–æ–¥–æ–≤ –≤ –ø—É–ª–µ: **${size}**`, { parse_mode: 'Markdown' });
}

async function handleQueueSize(ctx, language) {
  const size = await DB.getQueueSize();
  return ctx.reply(`üë• –í –æ—á–µ—Ä–µ–¥–∏: **${size}**`, { parse_mode: 'Markdown' });
}

async function handleRequestHelp(ctx, bot) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫ —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
  const acquired = await DB.acquireLock('help_request', 300); // 5 –º–∏–Ω—É—Ç
  
  if (!acquired) {
    return ctx.reply('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π.');
  }
  
  try {
    const allUsers = await DB.getAllUsers();
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ç–æ:
    // 1. –ü–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç (received –∏–ª–∏ completed)
    // 2. –ù–ï –ø–æ–¥–µ–ª–∏–ª—Å—è –≤—Å–µ–º–∏ 4 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏
    const targetUsers = allUsers.filter(u => 
      (u.status === 'received' || u.status === 'completed') &&
      (u.usage_count_shared || 0) < 4 &&
      !u.is_banned
    );
    
    if (targetUsers.length === 0) {
      await DB.releaseLock('help_request');
      return ctx.reply('‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏');
    }
    
    let successCount = 0;
    let failCount = 0;
    
    await ctx.reply(`üöÄ –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –¥–ª—è ${targetUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  for (const user of targetUsers) {
    try {
      const MESSAGES = getMessages(user.language || 'ru');
      
      const helpMessage = user.language === 'en'
        ? `üî• **GONDOR CALLS FOR AID!**

The invite pool is empty. People are waiting in queue.

**Will you answer the call?**

Even 1 extra invite use will help someone get access to Sora!`
        : `üî• **–ì–û–ù–î–û–† –ó–û–í–Å–¢ –ù–ê –ü–û–ú–û–©–¨!**

–ü—É–ª –∏–Ω–≤–∞–π—Ç–æ–≤ –æ–ø—É—Å—Ç–µ–ª. –õ—é–¥–∏ –∂–¥—É—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.

**–ü–æ–º–æ–∂–µ—à—å –ª–∏ —Ç—ã?**

–î–∞–∂–µ 1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞ –ø–æ–º–æ–∂–µ—Ç –∫–æ–º—É-—Ç–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø!`;
      
      await bot.telegram.sendMessage(user.telegram_id, helpMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: MESSAGES.buttons.rohanAnswers, callback_data: 'rohan_answers' }
          ]]
        }
      });
      successCount++;
      
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failCount++;
      console.error(`Help request failed for ${user.telegram_id}:`, error.message);
    }
  }
  
  return ctx.reply(`‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–£—Å–ø–µ—à–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫: ${failCount}`);
  } finally {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–æ–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => DB.releaseLock('help_request'), 30000);
  }
}

async function handleAdminStat(ctx) {
  try {
    const allUsers = await DB.getAllUsers();
    const poolSize = await DB.getPoolSize();
    const queueSize = await DB.getQueueSize();
    const settings = await DB.getSystemSettings();
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalUsers = allUsers.length;
    const receivedInvites = allUsers.filter(u => u.status === 'received' || u.status === 'completed').length;
    const returnedCodes = allUsers.filter(u => u.codes_returned > 0).length;
    const notReturned = receivedInvites - returnedCodes;
    const returnRate = receivedInvites > 0 ? Math.round((returnedCodes / receivedInvites) * 100) : 0;
    
    // –¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä—ã (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)
    const donors = allUsers
      .filter(u => u.usage_count_shared > 0)
      .sort((a, b) => (b.usage_count_shared || 0) - (a.usage_count_shared || 0))
      .slice(0, 5);
    
    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–¥—ã (–Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∂–∞–ª–æ–≤–∞–ª–∏—Å—å)
    const allReportedCodes = [];
    allUsers.forEach(u => {
      if (u.invalid_codes_reported && u.invalid_codes_reported.length > 0) {
        u.invalid_codes_reported.forEach(code => {
          const existing = allReportedCodes.find(r => r.code === code);
          if (existing) {
            existing.count++;
          } else {
            allReportedCodes.push({ code, count: 1 });
          }
        });
      }
    });
    
    const topReported = allReportedCodes
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);
    
    // –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const bannedUsers = allUsers.filter(u => u.is_banned);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
    const ruUsers = allUsers.filter(u => u.language === 'ru').length;
    const enUsers = allUsers.filter(u => u.language === 'en').length;
    
    const stat = `üìä **–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

**üéØ –û—Å–Ω–æ–≤–Ω–æ–µ:**
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
–ü–æ–ª—É—á–∏–ª–∏ –∏–Ω–≤–∞–π—Ç—ã: ${receivedInvites}
–í–µ—Ä–Ω—É–ª–∏ –∫–æ–¥—ã: ${returnedCodes} (${returnRate}%)
–ù–µ –≤–µ—Ä–Ω—É–ª–∏: ${notReturned}

**üíé –ü—É–ª –∏ –æ—á–µ—Ä–µ–¥—å:**
–ö–æ–¥–æ–≤ –≤ –ø—É–ª–µ: ${poolSize}
–í –æ—á–µ—Ä–µ–¥–∏: ${queueSize}
–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${poolSize > 0 ? (poolSize / Math.max(queueSize, 1)).toFixed(2) : '0'}

**üåç –Ø–∑—ã–∫–∏:**
üá∑üá∫ –†—É—Å—Å–∫–∏–π: ${ruUsers}
üá¨üáß English: ${enUsers}

**üèÜ –¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä—ã:**
${donors.length > 0 ? donors.map((u, i) => 
  `${i + 1}. @${u.username}: ${u.usage_count_shared} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`
).join('\n') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

**üö´ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–¥—ã (–∂–∞–ª–æ–±—ã):**
${topReported.length > 0 ? topReported.map(r => 
  `\`${r.code}\` - ${r.count} ${r.count === 1 ? '–∂–∞–ª–æ–±–∞' : '–∂–∞–ª–æ–±—ã'}`
).join('\n') : '–ù–µ—Ç –∂–∞–ª–æ–±'}

**üî® –ó–∞–±–∞–Ω–µ–Ω–æ:**
${bannedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
${bannedUsers.length > 0 ? bannedUsers.map(u => `@${u.username.replace(/_/g, '\\_')}: ${u.ban_reason}`).join('\n') : ''}

**üìà –°–∏—Å—Ç–µ–º–∞:**
–ü–µ—Ä–≤—ã—Ö 10: ${settings.first_10_count || 0}
–í—Å–µ–≥–æ –∫–æ–¥–æ–≤ –ø—Ä–æ—à–ª–æ: ${settings.first_10_count || 0}`;

    return ctx.reply(stat, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error generating admin stats:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

async function handleBroadcast(ctx, text, bot) {
  const message = text.replace('/broadcast ', '');
  
  if (!message) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç');
  }
  
  const allUsers = await DB.getAllUsers();
  let successCount = 0;
  let failCount = 0;
  
  await ctx.reply(`üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  for (const user of allUsers) {
    try {
      await bot.telegram.sendMessage(user.telegram_id, message, { parse_mode: 'Markdown' });
      successCount++;
      await new Promise(resolve => setTimeout(resolve, 50));
    } catch (error) {
      failCount++;
      console.error(`Broadcast failed for ${user.telegram_id}:`, error.message);
    }
  }
  
  return ctx.reply(`‚úÖ –ì–æ—Ç–æ–≤–æ!\n–£—Å–ø–µ—à–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫: ${failCount}`);
}
