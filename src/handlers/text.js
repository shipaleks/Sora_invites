import DB from '../database.js';
import { getMessages } from '../messages.js';
import config from '../config.js';
import { extractCodes } from '../utils/validators.js';
import { pluralize } from '../utils/helpers.js';

export function registerTextHandlers(bot) {
  bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    
    const user = await DB.getUser(userId);
    const MESSAGES = getMessages(user?.language || 'ru');
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    if (text.startsWith('/')) {
      // –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
      if (userId === config.telegram.adminId) {
        if (text.startsWith('/addcodes ')) {
          return handleAdminAddCodes(ctx, text, user?.language || 'ru');
        }
        if (text === '/poolsize') {
          return handlePoolSize(ctx, user?.language || 'ru');
        }
        if (text === '/queuesize') {
          return handleQueueSize(ctx, user?.language || 'ru');
        }
        if (text.startsWith('/broadcast ')) {
          return handleBroadcast(ctx, text, bot);
        }
      }
      return; // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ commands.js
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–æ–¥–æ–≤
    if (!user) {
      return ctx.reply(MESSAGES.notInSystem, { parse_mode: 'Markdown' });
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∫–æ–¥—ã
    if (user.awaiting_donation) {
      return handleDonation(ctx, user);
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç, –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–¥—ã
    if (user.status === 'received') {
      return handleCodeSubmission(ctx, user);
    }
  });
}

async function handleCodeSubmission(ctx, user) {
  const text = ctx.message.text;
  const codes = extractCodes(text);
  
  const MESSAGES = getMessages(user.language || 'ru');
  
  if (codes.length === 0) {
    const msg = user.language === 'en'
      ? '‚ùå No valid codes found. Send codes in format:\n```\ncode1\ncode2\n```'
      : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n```\n–∫–æ–¥1\n–∫–æ–¥2\n```';
    return ctx.reply(msg, { parse_mode: 'Markdown' });
  }
  
  // –ó–∞—â–∏—Ç–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥
  const ownCode = user.invite_code_given?.toUpperCase();
  const filteredCodes = codes.filter(code => code !== ownCode);
  
  if (filteredCodes.length < codes.length) {
    const msg = user.language === 'en'
      ? `‚ö†Ô∏è You cannot return your own invite code that you received!\n\nYour code: \`${ownCode}\`\nReturn codes that YOU generated in Sora after registration.`
      : `‚ö†Ô∏è –ù–µ–ª—å–∑—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª!\n\n–¢–≤–æ–π –∫–æ–¥: \`${ownCode}\`\n–í–æ–∑–≤—Ä–∞—â–∞–π –∫–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¢–ï–ë–ï –≤—ã–¥–∞–ª–∞ Sora –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`;
    
    await ctx.reply(msg, { parse_mode: 'Markdown' });
    
    if (filteredCodes.length === 0) {
      return; // –í—Å–µ –∫–æ–¥—ã –±—ã–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
    }
  }
  
  const codes = filteredCodes;
  
  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –Ω—É–∂–Ω–æ
  const allUsers = await DB.getAllUsers();
  const usersWithInvites = allUsers
    .filter(u => u.invite_sent_at)
    .sort((a, b) => {
      const timeA = a.invite_sent_at?.toDate?.() || new Date(0);
      const timeB = b.invite_sent_at?.toDate?.() || new Date(0);
      return timeA - timeB;
    });
  
  const userIndex = usersWithInvites.findIndex(u => u.telegram_id === user.telegram_id) + 1;
  const codesRequired = userIndex <= 10 ? 
    config.rules.first10CodesRequired : 
    config.rules.regularCodesRequired;
  
  const neededCodes = codesRequired - user.codes_returned;
  
  if (neededCodes <= 0) {
    const msg = user.language === 'en'
      ? '‚úÖ You\'ve already returned all required codes. Thank you!'
      : '‚úÖ –¢—ã —É–∂–µ –≤–µ—Ä–Ω—É–ª –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–¥—ã. –°–ø–∞—Å–∏–±–æ!';
    return ctx.reply(msg, { parse_mode: 'Markdown' });
  }
  
  if (codes.length < neededCodes) {
    const msg = user.language === 'en'
      ? `‚ùå Need **${neededCodes}** code${neededCodes > 1 ? 's' : ''}.\nOnly **${codes.length}** sent.`
      : `‚ùå –ù—É–∂–Ω–æ **${neededCodes}** ${pluralize(neededCodes, '–∫–æ–¥', '–∫–æ–¥–∞', '–∫–æ–¥–æ–≤', user.language)}.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ **${codes.length}**.`;
    return ctx.reply(msg, { parse_mode: 'Markdown' });
  }
  
  const codesToAdd = codes.slice(0, neededCodes);
  
  try {
    // –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª
    await DB.addCodesToPool(codesToAdd, user.telegram_id);
    
    const newTotal = user.codes_returned + codesToAdd.length;
    
    await DB.updateUser(user.telegram_id, {
      codes_returned: newTotal,
      codes_submitted: [...(user.codes_submitted || []), ...codesToAdd],
      status: newTotal >= codesRequired ? 'completed' : 'received',
      awaiting_codes: false
    });
    
    await ctx.reply(MESSAGES.codesReceived(newTotal), {
      parse_mode: 'Markdown'
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try {
      await ctx.telegram.sendMessage(
        config.telegram.adminId,
        `‚úÖ –ö–æ–¥—ã –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç @${user.username}: ${codesToAdd.length} —à—Ç.`
      );
    } catch (error) {
      console.error('Admin notification failed:', error.message);
    }
  } catch (error) {
    console.error('Error processing codes:', error);
    const msg = user.language === 'en'
      ? '‚ùå An error occurred while processing codes. Try again.'
      : '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.';
    await ctx.reply(msg);
  }
}

async function handleDonation(ctx, user) {
  const text = ctx.message.text;
  const codes = extractCodes(text);
  
  const MESSAGES = getMessages(user.language || 'ru');
  
  if (codes.length === 0) {
    const msg = user.language === 'en'
      ? '‚ùå No valid codes found. Send codes in format:\n```\ncode1\ncode2\n```'
      : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n```\n–∫–æ–¥1\n–∫–æ–¥2\n```';
    return ctx.reply(msg, { parse_mode: 'Markdown' });
  }
  
  try {
    // –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª –∫–∞–∫ –¥–æ–Ω–µ–π—à–µ–Ω
    await DB.addCodesToPool(codes, `donation:${user.telegram_id}`);
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥
    await DB.updateUser(user.telegram_id, {
      awaiting_donation: false
    });
    
    await ctx.reply(MESSAGES.donationReceived(codes.length, user.language), {
      parse_mode: 'Markdown'
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try {
      await ctx.telegram.sendMessage(
        config.telegram.adminId,
        `üíù –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç @${user.username}: ${codes.length} —à—Ç.`
      );
    } catch (error) {
      console.error('Admin notification failed:', error.message);
    }
  } catch (error) {
    console.error('Error processing donation:', error);
    const msg = user.language === 'en'
      ? '‚ùå An error occurred while processing codes. Try again.'
      : '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.';
    await ctx.reply(msg);
  }
}

async function handleAdminAddCodes(ctx, text, language) {
  const codes = text
    .replace('/addcodes ', '')
    .split(/\s+/)
    .filter(c => c.length >= 5);
  
  if (codes.length === 0) {
    const msg = language === 'en' ? '‚ùå No valid codes specified' : '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–¥—ã';
    return ctx.reply(msg);
  }
  
  await DB.addCodesToPool(codes, 'admin');
  
  const msg = language === 'en'
    ? `‚úÖ Added ${codes.length} code${codes.length > 1 ? 's' : ''} to pool`
    : `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${codes.length} ${pluralize(codes.length, '–∫–æ–¥', '–∫–æ–¥–∞', '–∫–æ–¥–æ–≤', language)} –≤ –ø—É–ª`;
  
  return ctx.reply(msg);
}

async function handlePoolSize(ctx, language) {
  const size = await DB.getPoolSize();
  const msg = language === 'en'
    ? `üíé Codes in pool: **${size}**`
    : `üíé –ö–æ–¥–æ–≤ –≤ –ø—É–ª–µ: **${size}**`;
  return ctx.reply(msg, { parse_mode: 'Markdown' });
}

async function handleQueueSize(ctx, language) {
  const size = await DB.getQueueSize();
  const msg = language === 'en'
    ? `üë• In queue: **${size}**`
    : `üë• –í –æ—á–µ—Ä–µ–¥–∏: **${size}**`;
  return ctx.reply(msg, { parse_mode: 'Markdown' });
}

async function handleBroadcast(ctx, text, bot) {
  const message = text.replace('/broadcast ', '');
  
  if (!message) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
  }
  
  const allUsers = await DB.getAllUsers();
  let successCount = 0;
  let failCount = 0;
  
  await ctx.reply(`üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  for (const user of allUsers) {
    try {
      await bot.telegram.sendMessage(user.telegram_id, message, { parse_mode: 'Markdown' });
      successCount++;
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å rate limit
      await new Promise(resolve => setTimeout(resolve, 50));
    } catch (error) {
      failCount++;
      console.error(`Broadcast failed for ${user.telegram_id}:`, error.message);
    }
  }
  
  return ctx.reply(
    `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
    `–£—Å–ø–µ—à–Ω–æ: ${successCount}\n` +
    `–û—à–∏–±–æ–∫: ${failCount}`
  );
}
