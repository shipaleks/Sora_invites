import DB from '../database.js';
import { getMessages } from '../messages.js';
import config from '../config.js';
import { extractCodes, validateInviteCode, validateSoraPrompt } from '../utils/validators.js';
import { enhancePromptWithCookbook, createSoraVideo, pollSoraVideo, soraQueue, Stars } from '../sora.js';
import { pluralize } from '../utils/helpers.js';

export function registerTextHandlers(bot) {
  bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    
    const user = await DB.getUser(userId);
    const MESSAGES = getMessages(user?.language || 'ru');
    
    // –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
    if (text.startsWith('/') && userId === config.telegram.adminId) {
      if (text.startsWith('/addcodes ')) {
        return handleAdminAddCodes(ctx, text, user?.language || 'ru');
      }
      if (text.startsWith('/removecode ')) {
        return handleAdminRemoveCode(ctx, text, user?.language || 'ru');
      }
      if (text === '/clearpool') {
        return handleClearPool(ctx, user?.language || 'ru');
      }
      if (text === '/clearqueue') {
        return handleClearQueue(ctx, user?.language || 'ru');
      }
      if (text === '/resetall') {
        return handleResetAll(ctx, user?.language || 'ru');
      }
      if (text.startsWith('/finduser ')) {
        return handleFindUser(ctx, text);
      }
      if (text.startsWith('/ban ')) {
        return handleBan(ctx, text);
      }
      if (text.startsWith('/unban ')) {
        return handleUnban(ctx, text);
      }
      if (text === '/poolsize') {
        return handlePoolSize(ctx, user?.language || 'ru');
      }
      if (text === '/queuesize') {
        return handleQueueSize(ctx, user?.language || 'ru');
      }
      if (text.startsWith('/broadcast ')) {
        return handleBroadcast(ctx, text, bot);
      }
      if (text === '/requesthelp') {
        return handleRequestHelp(ctx, bot);
      }
      if (text === '/adminstat') {
        return handleAdminStat(ctx);
      }
      if (text.startsWith('/refunduser ')) {
        return handleRefundUser(ctx, text);
      }
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ (start, stats, help, language) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ commands.js
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ commands.js)
    if (text.startsWith('/')) {
      return;
    }
    
    if (!user) {
      return ctx.reply(MESSAGES.notInSystem, { parse_mode: 'Markdown' });
    }
    
    // Sora admin test: –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤)
    if (user.sora_pending_mode) {
      console.log(`[Sora] Admin ${userId} prompt received, mode: ${user.sora_pending_mode}`);
      return handleSoraPrompt(ctx, user);
    }
    
    // –£–ü–†–û–©–Å–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: 3 —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ + –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    // 1. –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if (user.awaiting_unused_return === true) {
      return handleUnusedReturn(ctx, user);
    }
    
    // 2. –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê!)
    if (user.awaiting_usage_choice === true || user.awaiting_donation_usage === true) {
      const msg = user.language === 'en' 
        ? '‚è≥ Please choose how many uses to share by clicking a button above ‚¨ÜÔ∏è' 
        : '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ ‚¨ÜÔ∏è';
      return ctx.reply(msg);
    }
    
    // 2.5. –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (donation)
    if (user.awaiting_donation === true) {
      return handleDonation(ctx, user);
    }

    // 3. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
    if (user.awaiting_share === true) {
      return handleCodeSharing(ctx, user);
    }
  });
}

async function handleCodeSharing(ctx, user) {
  const text = ctx.message.text;
  const codes = extractCodes(text);
  
  const MESSAGES = getMessages(user.language || 'ru');
  
  // SHADOW BAN: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö, –Ω–æ –≤–µ–¥—ë–º —Å–µ–±—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
  if (user.is_banned) {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    await ctx.reply('‚úÖ ' + (user.language === 'en' ? 'Code received! Processing...' : '–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...'), {
      parse_mode: 'Markdown'
    });
    
    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "—É—Å–ø–µ—à–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(async () => {
      await ctx.reply('‚úÖ ' + (user.language === 'en' ? 'Thank you! Code added to pool.' : '–°–ø–∞—Å–∏–±–æ! –ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É–ª.'));
    }, 2000);
    
    // –ù–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
    console.log(`[SHADOW BAN] User @${user.username} tried to submit code (banned)`);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –±—ã–ª–∏ –ª–∏ –∂–∞–ª–æ–±—ã –Ω–∞ –∫–æ–¥—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const allUsers = await DB.getAllUsers();
  const complaintsOnUserCodes = allUsers.filter(u => 
    u.invalid_codes_reported?.some(reportedCode => 
      user.codes_submitted?.includes(reportedCode)
    )
  ).length;
  
  if (complaintsOnUserCodes >= 3) {
    return ctx.reply(
      `üö´ –ù–∞ —Ç–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–¥—ã –ø–æ—Å—Ç—É–ø–∏–ª–∏ –∂–∞–ª–æ–±—ã.\n\n–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã!`,
      { parse_mode: 'Markdown' }
    );
  }
  
  if (codes.length === 0) {
    return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–¥ –∏–∑ Sora (6 —Å–∏–º–≤–æ–ª–æ–≤).', { 
      parse_mode: 'Markdown' 
    });
  }

  const code = codes[0]; // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∫–æ–¥
  if (!validateInviteCode(code)) {
    return ctx.reply('‚ùå –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 –±—É–∫–≤/—Ü–∏—Ñ—Ä.', {
      parse_mode: 'Markdown'
    });
  }
  const botGivenCode = user.invite_code_given?.toUpperCase();
  
  // –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫–æ–¥ –æ—Ç –±–æ—Ç–∞ –±–ª–æ–∫–∏—Ä—É–µ–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º
  if (botGivenCode && code === botGivenCode) {
    return ctx.reply(
      `‚ö†Ô∏è –≠—Ç–æ –∫–æ–¥ –æ—Ç –±–æ—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: \`${botGivenCode}\`\n\n` +
      `–ù—É–∂–µ–Ω –∫–æ–¥ –æ—Ç Sora –ü–û–°–õ–ï —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`,
      { parse_mode: 'Markdown' }
    );
  }
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    await DB.updateUser(user.telegram_id, {
      pending_code: code,
      awaiting_usage_choice: true,
      awaiting_share: false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    const uniqueCodes = await DB.getUniqueCodesCount();
    const currentQueueSize = await DB.getQueueSize();
    
    await ctx.reply(MESSAGES.chooseUsageCount(code, uniqueCodes, currentQueueSize), {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: MESSAGES.buttons.usage2, callback_data: 'usage_2' }],
          [{ text: MESSAGES.buttons.usage3, callback_data: 'usage_3' }],
          [{ text: MESSAGES.buttons.usage4, callback_data: 'usage_4' }]
        ]
      }
    });
  } catch (error) {
    console.error('Error processing code:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
  }
}

async function handleDonation(ctx, user) {
  const text = ctx.message.text;
  const codes = extractCodes(text);
  
  const MESSAGES = getMessages(user.language || 'ru');
  
  // SHADOW BAN –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
  if (user.is_banned) {
    await ctx.reply('‚úÖ ' + (user.language === 'en' ? 'Code received! Processing...' : '–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...'));
    setTimeout(async () => {
      await ctx.reply('üíù ' + (user.language === 'en' ? 'Thank you for donation!' : '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!'));
    }, 2000);
    console.log(`[SHADOW BAN] User @${user.username} tried to donate (banned)`);
    await DB.updateUser(user.telegram_id, {
      awaiting_donation: false,
      awaiting_donation_usage: false
    });
    return;
  }
  
  if (codes.length === 0) {
    return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥.', { parse_mode: 'Markdown' });
  }

  const first = codes[0];
  if (!validateInviteCode(first)) {
    return ctx.reply('‚ùå –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 –±—É–∫–≤/—Ü–∏—Ñ—Ä.', {
      parse_mode: 'Markdown'
    });
  }
  
  try {
    const code = first;
    
    await DB.updateUser(user.telegram_id, {
      pending_donation_code: code,
      awaiting_donation: false,
      awaiting_donation_usage: true
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    const uniqueCodes = await DB.getUniqueCodesCount();
    const currentQueueSize = await DB.getQueueSize();
    
    await ctx.reply(MESSAGES.chooseUsageCount(code, uniqueCodes, currentQueueSize), {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: MESSAGES.buttons.usage2, callback_data: 'donation_usage_2' }],
          [{ text: MESSAGES.buttons.usage3, callback_data: 'donation_usage_3' }],
          [{ text: MESSAGES.buttons.usage4, callback_data: 'donation_usage_4' }]
        ]
      }
    });
  } catch (error) {
    console.error('Error processing donation:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞.');
  }
}

async function handleSoraPrompt(ctx, user) {
  console.log('[Sora] handleSoraPrompt v1.0.1 - NEW CODE with choice buttons');
  const language = user.language || 'ru';
  const MESSAGES = getMessages(language);
  const text = ctx.message.text || '';

  const basicValidation = validateSoraPrompt(text);
  if (!basicValidation.ok) {
    return ctx.reply(MESSAGES.generationFailed('–ü–ª–æ—Ö–æ–π –ø—Ä–æ–º–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ.'));
  }

  try {
    // 1) –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
    console.log('[Sora] Enhancing prompt...');
    const enhanced = await enhancePromptWithCookbook(text, language);
    console.log('[Sora] Enhanced prompt length:', enhanced.length);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ policy violation
    if (enhanced.includes('POLICY_VIOLATION')) {
      await DB.updateUser(user.telegram_id, { sora_pending_mode: null });
      return ctx.reply(language === 'en' 
        ? 'üö´ This prompt violates content policy. Please try a different idea.'
        : 'üö´ –≠—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å—é–∂–µ—Ç.');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    await DB.updateUser(user.telegram_id, { 
      sora_original_prompt: text,
      sora_enhanced_prompt: enhanced
    });
    console.log('[Sora] Saved prompts to DB, sending choice buttons...');
    
    await ctx.reply(MESSAGES.promptEnhanceChoice, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[
          { text: '‚ú® –£—Å–∏–ª–µ–Ω–Ω—ã–π', callback_data: 'sora_use_enhanced' },
          { text: 'üìù –û—Ä–∏–≥–∏–Ω–∞–ª', callback_data: 'sora_use_original' }
        ]]
      }
    });
    console.log('[Sora] Choice buttons sent successfully');
  } catch (error) {
    console.error('Sora prompt enhancement error:', error);
    await ctx.reply(MESSAGES.generationFailed(error.message || 'unknown'));
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ sora-handlers.js –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤

async function handleUnusedReturn(ctx, user) {
  const text = ctx.message.text;
  const codes = extractCodes(text);
  
  const MESSAGES = getMessages(user.language || 'ru');
  
  // SHADOW BAN –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
  if (user.is_banned) {
    await ctx.reply('‚úÖ ' + (user.language === 'en' ? 'Code received! Processing...' : '–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...'));
    setTimeout(async () => {
      await ctx.reply('‚úÖ ' + (user.language === 'en' ? 'Code returned to pool!' : '–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –ø—É–ª!'));
    }, 2000);
    console.log(`[SHADOW BAN] User @${user.username} tried to return unused (banned)`);
    await DB.updateUser(user.telegram_id, {
      awaiting_unused_return: false
    });
    return;
  }
  
  if (codes.length === 0) {
    return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥.', { parse_mode: 'Markdown' });
  }
  
  const ownCode = user.invite_code_given?.toUpperCase();
  const returnedCode = codes[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –µ–≥–æ –∫–æ–¥ –æ—Ç –±–æ—Ç–∞
  if (returnedCode !== ownCode) {
    return ctx.reply(
      `‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–π –∫–æ–¥ –æ—Ç –±–æ—Ç–∞.\n\n–¢–≤–æ–π –∫–æ–¥: \`${ownCode}\`\n–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª: \`${returnedCode}\``,
      { parse_mode: 'Markdown' }
    );
  }
  
  try {
    const addedCount = await DB.addCodesToPoolWithLimit(returnedCode, `unused:${user.telegram_id}`, 1);
    
    if (addedCount === 0) {
      await DB.updateUser(user.telegram_id, { awaiting_unused_return: false });
      return ctx.reply('‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –≤ –ø—É–ª–µ', { parse_mode: 'Markdown' });
    }
    
    await DB.updateUser(user.telegram_id, {
      status: 'returned_unused',
      awaiting_unused_return: false,
      codes_returned: 0
    });
    
    await ctx.reply(MESSAGES.unusedReturned(returnedCode, user.language), {
      parse_mode: 'Markdown'
    });
    
    try {
      await ctx.telegram.sendMessage(
        config.telegram.adminId,
        `‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç @${user.username}\n–ö–æ–¥: ${returnedCode}`
      );
    } catch (error) {
      console.error('Admin notification failed:', error.message);
    }
  } catch (error) {
    console.error('Error processing unused return:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞.');
  }
}

async function handleAdminAddCodes(ctx, text, language) {
  const params = text.replace('/addcodes ', '').trim();
  const parts = params.split(/\s+/);
  
  if (parts.length === 0) {
    return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /addcodes –ö–û–î [–ö–û–õ–ò–ß–ï–°–¢–í–û]\n–ü—Ä–∏–º–µ—Ä: /addcodes ABC123 2');
  }
  
  const lastPart = parts[parts.length - 1];
  let usageCount = 1;
  let codeText = params;
  
  if (/^\d+$/.test(lastPart)) {
    usageCount = parseInt(lastPart);
    if (usageCount < 1 || usageCount > 4) {
      return ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1-4');
    }
    codeText = parts.slice(0, -1).join(' ');
  }
  
  const codes = extractCodes(codeText);
  
  if (codes.length === 0) {
    return ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥');
  }
  
  const code = codes[0];
  const addedCount = await DB.addCodesToPoolWithLimit(code, 'admin', usageCount);
  
  if (addedCount === 0) {
    return ctx.reply(`‚ùå –ö–æ–¥ ${code} —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç (${config.rules.maxCodeUsage} –º–∞–∫—Å)`);
  }
  
  return ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω:\n–ö–æ–¥: \`${code}\`\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${addedCount}`, {
    parse_mode: 'Markdown'
  });
}

async function handleAdminRemoveCode(ctx, text, language) {
  const code = text.replace('/removecode ', '').trim().toUpperCase();
  
  if (!code || code.length < 5) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏ –∫–æ–¥');
  }
  
  const removed = await DB.removeCodeFromPool(code);
  
  if (removed) {
    return ctx.reply(`‚úÖ –£–¥–∞–ª—ë–Ω: \`${code}\``, { parse_mode: 'Markdown' });
  } else {
    return ctx.reply(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: \`${code}\``, { parse_mode: 'Markdown' });
  }
}

async function handleClearPool(ctx, language) {
  const count = await DB.clearAllAvailableCodes();
  return ctx.reply(`‚úÖ –û—á–∏—â–µ–Ω–æ ${count} ${pluralize(count, '–∫–æ–¥', '–∫–æ–¥–∞', '–∫–æ–¥–æ–≤', language)} –∏–∑ –ø—É–ª–∞`);
}

async function handleClearQueue(ctx, language) {
  const count = await DB.clearQueue();
  return ctx.reply(`‚úÖ –û—á–∏—â–µ–Ω–æ ${count} ${pluralize(count, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', language)} –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
}

async function handleResetAll(ctx, language) {
  await ctx.reply('‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ. –£–≤–µ—Ä–µ–Ω? –û—Ç–ø—Ä–∞–≤—å /confirmedreset');
}

async function handleBan(ctx, text) {
  const params = text.replace('/ban ', '').trim();
  const parts = params.split(' ');
  const username = parts[0];
  const reason = parts.slice(1).join(' ') || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª';
  
  if (!username) {
    return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /ban @username –ø—Ä–∏—á–∏–Ω–∞\n–ü—Ä–∏–º–µ—Ä: /ban @user123 –§–µ–π–∫–æ–≤—ã–µ –∫–æ–¥—ã');
  }
  
  const user = await DB.getUserByUsername(username);
  
  if (!user) {
    return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  await ctx.reply('üî® –ë–∞–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞—é –±–∞–∑—É –æ—Ç —Å–∫–∞–º-–∫–æ–¥–æ–≤...');
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Firestore –¥–ª—è –ø—Ä—è–º–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π
  const admin = await import('firebase-admin');
  const db = admin.default.firestore();
  const bot = ctx.telegram;
  
  try {
    // 1. –ù–∞—Ö–æ–¥–∏–º –í–°–ï –∫–æ–¥—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const scamCodes = [];
    
    // –ö–æ–¥—ã –∏–∑ –ø—É–ª–∞ (–∞–∫—Ç–∏–≤–Ω—ã–µ)
    const poolQuery = await db.collection('invite_pool')
      .where('submitted_by', '==', user.telegram_id)
      .get();
    
    poolQuery.forEach(doc => {
      scamCodes.push(doc.data().code);
    });
    
    // –ö–æ–¥—ã –∏–∑ –ø—É–ª–∞ (donation)
    const donationQuery = await db.collection('invite_pool')
      .where('submitted_by', '==', `donation:${user.telegram_id}`)
      .get();
    
    donationQuery.forEach(doc => {
      scamCodes.push(doc.data().code);
    });
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
    const uniqueScamCodes = [...new Set(scamCodes)];
    
    // 2. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–∏ –∫–æ–¥—ã
    const allUsers = await DB.getAllUsers();
    const victims = allUsers.filter(u => 
      u.invite_code_given && uniqueScamCodes.includes(u.invite_code_given.toUpperCase())
    );
    
    // 3. –£–¥–∞–ª—è–µ–º –í–°–ï —Å–∫–∞–º-–∫–æ–¥—ã –∏–∑ –ø—É–ª–∞ (–≤–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã)
    const poolDeletePromises = [];
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–¥—ã –∏–∑ –ø—É–ª–∞
    for (const code of uniqueScamCodes) {
      const deleteQuery = db.collection('invite_pool').where('code', '==', code);
      const snapshot = await deleteQuery.get();
      snapshot.forEach(doc => {
        poolDeletePromises.push(doc.ref.delete());
      });
    }
    
    await Promise.all(poolDeletePromises);
    
    // 4. –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DB.banUser(user.telegram_id, reason);
    
    // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∂–µ—Ä—Ç–≤–∞–º
    let notifiedCount = 0;
    for (const victim of victims) {
      try {
        const victimLang = victim.language || 'ru';
        const message = victimLang === 'en' 
          ? `‚ö†Ô∏è **ATTENTION: Scam code detected!**\n\nThe invite code you received was invalid.\nThe scammer has been banned.\n\n‚úÖ You can request a new invite now - just click /start and choose "Get Invite"`
          : `‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–∞–º!**\n\n–ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª, –æ–∫–∞–∑–∞–ª—Å—è —Ñ–µ–π–∫–æ–≤—ã–º.\n–ú–æ—à–µ–Ω–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω.\n\n‚úÖ –ú–æ–∂–µ—à—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start –∏ –≤—ã–±–µ—Ä–∏ "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–∞–π—Ç"`;
        
        await bot.sendMessage(victim.telegram_id, message, { parse_mode: 'Markdown' });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∂–µ—Ä—Ç–≤—ã, —á—Ç–æ–±—ã –º–æ–≥–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç
        await DB.updateUser(victim.telegram_id, {
          status: 'new',
          invite_code_given: null,
          invite_sent_at: null
        });
        
        notifiedCount++;
      } catch (error) {
        console.error(`Failed to notify victim ${victim.username}:`, error.message);
      }
    }
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –≤ username
    const safeUsername = user.username.replace(/_/g, '\\_');
    
    const report = `‚úÖ **–ë–∞–Ω –∑–∞–≤–µ—Ä—à—ë–Ω: @${safeUsername}**\n\n` +
      `üìã –ü—Ä–∏—á–∏–Ω–∞: ${reason}\n` +
      `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∫–æ–¥–æ–≤: ${uniqueScamCodes.length}\n` +
      `üë• –ñ–µ—Ä—Ç–≤ –æ–ø–æ–≤–µ—â–µ–Ω–æ: ${notifiedCount}\n\n` +
      `${uniqueScamCodes.length > 0 ? `üö´ –£–¥–∞–ª—ë–Ω–Ω—ã–µ –∫–æ–¥—ã:\n${uniqueScamCodes.map(c => `\`${c}\``).join(', ')}` : ''}`;
    
    return ctx.reply(report, { parse_mode: 'Markdown' });
    
  } catch (error) {
    console.error('Ban error:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.');
  }
}

async function handleUnban(ctx, text) {
  const username = text.replace('/unban ', '').trim();
  
  if (!username) {
    return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /unban @username');
  }
  
  const user = await DB.getUserByUsername(username);
  
  if (!user) {
    return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  await DB.unbanUser(user.telegram_id);
  
  const safeUsername = user.username.replace(/_/g, '\\_');
  
  return ctx.reply(`‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω: @${safeUsername}`, {
    parse_mode: 'Markdown'
  });
}

async function handleFindUser(ctx, text) {
  const userId = text.replace('/finduser ', '').trim();
  
  if (!userId) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏ ID: /finduser 12345');
  }
  
  const user = await DB.getUser(userId);
  
  if (!user) {
    return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
  
  const queuePos = await DB.getQueuePosition(userId);
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ username
  const safeUsername = user.username.replace(/_/g, '\\_');
  
  const info = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

ID: \`${user.telegram_id}\`
Username: @${safeUsername}
–°—Ç–∞—Ç—É—Å: ${user.status}
–û—á–µ—Ä–µ–¥—å: ${queuePos || '-'}
${user.is_banned ? `\nüö´ –ó–ê–ë–ê–ù–ï–ù: ${user.ban_reason}` : ''}

–ü–æ–ª—É—á–∏–ª –∫–æ–¥: ${user.invite_code_given || '-'}
–í–µ—Ä–Ω—É–ª: ${user.codes_returned}
–ò–Ω–≤–∞–π—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${user.invites_received_count || 0}`;

  return ctx.reply(info, { parse_mode: 'Markdown' });
}

async function handlePoolSize(ctx, language) {
  const size = await DB.getPoolSize();
  return ctx.reply(`üíé –ö–æ–¥–æ–≤ –≤ –ø—É–ª–µ: **${size}**`, { parse_mode: 'Markdown' });
}

async function handleQueueSize(ctx, language) {
  const size = await DB.getQueueSize();
  return ctx.reply(`üë• –í –æ—á–µ—Ä–µ–¥–∏: **${size}**`, { parse_mode: 'Markdown' });
}

async function handleRequestHelp(ctx, bot) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫ —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
  const acquired = await DB.acquireLock('help_request', 300); // 5 –º–∏–Ω—É—Ç
  
  if (!acquired) {
    return ctx.reply('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π.');
  }
  
  try {
    const allUsers = await DB.getAllUsers();
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ç–æ:
    // 1. –ü–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç (received –∏–ª–∏ completed)
    // 2. –ù–ï –ø–æ–¥–µ–ª–∏–ª—Å—è –≤—Å–µ–º–∏ 4 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏
    // 3. –ù–ï –ø–æ–ª—É—á–∞–ª –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const now = new Date();
    const targetUsers = allUsers.filter(u => {
      if ((u.status !== 'received' && u.status !== 'completed') || u.is_banned) {
        return false;
      }
      
      if ((u.usage_count_shared || 0) >= 4) {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∞–ª –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏
      if (u.last_help_request) {
        const lastRequest = u.last_help_request.toDate ? u.last_help_request.toDate() : new Date(u.last_help_request);
        const hoursSince = (now - lastRequest) / (1000 * 60 * 60);
        
        if (hoursSince < 24) {
          return false; // –ù–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–∞–ª –∑–∞–ø—Ä–æ—Å
        }
      }
      
      return true;
    });
    
    if (targetUsers.length === 0) {
      await DB.releaseLock('help_request');
      return ctx.reply('‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏');
    }
    
    let successCount = 0;
    let failCount = 0;
    
    await ctx.reply(`üöÄ –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –¥–ª—è ${targetUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  for (const user of targetUsers) {
    try {
      const MESSAGES = getMessages(user.language || 'ru');
      
      const helpMessage = user.language === 'en'
        ? `üî• **GONDOR CALLS FOR AID!**

The invite pool is empty. People are waiting in queue.

**Donate your Sora invite code!**

You can share more uses of your code (even if you already shared some).

Click the button to help! ‚¨áÔ∏è`
        : `üî• **–ì–û–ù–î–û–† –ó–û–í–Å–¢ –ù–ê –ü–û–ú–û–©–¨!**

–ü—É–ª –∏–Ω–≤–∞–π—Ç–æ–≤ –æ–ø—É—Å—Ç–µ–ª. –õ—é–¥–∏ –∂–¥—É—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.

**–ü–æ–∂–µ—Ä—Ç–≤—É–π —Å–≤–æ–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ –∏–∑ Sora!**

–ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏ —Å–≤–æ–µ–≥–æ –∫–æ–¥–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –¥–µ–ª–∏–ª—Å—è).

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! ‚¨áÔ∏è`;
      
      await bot.telegram.sendMessage(user.telegram_id, helpMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: MESSAGES.buttons.rohanAnswers, callback_data: 'rohan_answers' }
          ]]
        }
      });
      
      // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await DB.updateUser(user.telegram_id, {
        last_help_request: new Date()
      });
      
      successCount++;
      
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failCount++;
      console.error(`Help request failed for ${user.telegram_id}:`, error.message);
    }
  }
  
  return ctx.reply(`‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–£—Å–ø–µ—à–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫: ${failCount}`);
  } finally {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–æ–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => DB.releaseLock('help_request'), 30000);
  }
}

async function handleAdminStat(ctx) {
  try {
    await ctx.reply('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    
    const allUsers = await DB.getAllUsers();
    const poolSize = await DB.getPoolSize();
    const queueSize = await DB.getQueueSize();
    
    // ========== –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
    const totalUsers = allUsers.length;
    const receivedInvites = allUsers.filter(u => u.status === 'received' || u.status === 'completed').length;
    const returnedCodes = allUsers.filter(u => u.codes_returned > 0).length;
    const returnRate = receivedInvites > 0 ? Math.round((returnedCodes / receivedInvites) * 100) : 0;
    
    // ========== –ö–û–ù–í–ï–†–°–ò–Ø ==========
    const usersWhoShared = allUsers.filter(u => u.usage_count_shared > 0).length;
    const shareRate = receivedInvites > 0 ? Math.round((usersWhoShared / receivedInvites) * 100) : 0;
    
    // ========== –í–†–ï–ú–Ø –û–ñ–ò–î–ê–ù–ò–Ø ==========
    const avgWaitHours = await DB.getAverageWaitTimeHours();
    const usersWithWaitTime = allUsers.filter(u => 
      u.invite_sent_at && (u.joined_queue_at || u.requested_at)
    );
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    const waitTimesByHour = {};
    usersWithWaitTime.forEach(u => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º joined_queue_at –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ requested_at (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      const joinedAt = u.joined_queue_at 
        ? (u.joined_queue_at?.toDate?.() || new Date(u.joined_queue_at))
        : (u.requested_at?.toDate?.() || new Date(u.requested_at));
      
      const sentAt = u.invite_sent_at?.toDate?.() || new Date(u.invite_sent_at);
      const waitHours = Math.round((sentAt - joinedAt) / (1000 * 60 * 60));
      
      if (waitHours >= 0 && waitHours <= 48) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 48 —á–∞—Å–∞–º–∏
        waitTimesByHour[waitHours] = (waitTimesByHour[waitHours] || 0) + 1;
      }
    });
    
    // ========== –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–°–õ–ï–î–ù–ò–• 7 –î–ù–ï–ô ==========
    const now = new Date();
    const last7DaysActivity = {};
    for (let i = 6; i >= 0; i--) {
      const date = new Date(now);
      date.setDate(date.getDate() - i);
      const dayKey = date.toISOString().split('T')[0];
      last7DaysActivity[dayKey] = { invites: 0, returns: 0 };
    }
    
    allUsers.forEach(u => {
      // –ò–Ω–≤–∞–π—Ç—ã
      if (u.invite_sent_at) {
        const date = u.invite_sent_at.toDate ? u.invite_sent_at.toDate() : new Date(u.invite_sent_at);
        const dayKey = date.toISOString().split('T')[0];
        if (last7DaysActivity[dayKey]) {
          last7DaysActivity[dayKey].invites++;
        }
      }
      
      // –í–æ–∑–≤—Ä–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–∫—Å–∏)
      if (u.codes_returned > 0 && u.requested_at) {
        const date = u.requested_at.toDate ? u.requested_at.toDate() : new Date(u.requested_at);
        const dayKey = date.toISOString().split('T')[0];
        if (last7DaysActivity[dayKey]) {
          last7DaysActivity[dayKey].returns++;
        }
      }
    });
    
    // ========== –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø–ú ==========
    const usageDistribution = {
      1: allUsers.filter(u => u.usage_count_shared === 1).length,
      2: allUsers.filter(u => u.usage_count_shared === 2).length,
      3: allUsers.filter(u => u.usage_count_shared === 3).length,
      4: allUsers.filter(u => u.usage_count_shared === 4).length
    };
    
    const totalShared = Object.values(usageDistribution).reduce((a, b) => a + b, 0);
    
    // ========== –ó–ê–ë–ê–ù–ï–ù–ù–´–ï ==========
    const bannedUsers = allUsers.filter(u => u.is_banned);
    
    // –ë–∞–Ω—ã –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const bansByDay = {};
    for (let i = 6; i >= 0; i--) {
      const date = new Date(now);
      date.setDate(date.getDate() - i);
      const dayKey = date.toISOString().split('T')[0];
      bansByDay[dayKey] = 0;
    }
    
    bannedUsers.forEach(u => {
      if (u.ban_reason && u.ban_reason.includes('–ê–≤—Ç–æ–±–∞–Ω')) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –±–∞–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–∞—Ç—É –∏–∑ –ø—Ä–∏—á–∏–Ω—ã –∏–ª–∏ —Ç–µ–∫—É—â—É—é)
        // –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ banned_at
        const dayKey = new Date().toISOString().split('T')[0];
        if (bansByDay[dayKey] !== undefined) {
          bansByDay[dayKey]++;
        }
      }
    });
    
    // ========== –Ø–ó–´–ö–ò ==========
    const ruUsers = allUsers.filter(u => u.language === 'ru').length;
    const enUsers = allUsers.filter(u => u.language === 'en').length;
    
    // ========== –¢–ï–ö–°–¢–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
    const stat = `üìä **–ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

**üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
–í—Å–µ–≥–æ: ${totalUsers}
üá∑üá∫ –†—É—Å—Å–∫–∏–π: ${ruUsers} | üá¨üáß English: ${enUsers}

**‚ö°Ô∏è –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:**
–ü–æ–ª—É—á–∏–ª–∏ –∏–Ω–≤–∞–π—Ç: ${receivedInvites}
–í–µ—Ä–Ω—É–ª–∏ –∫–æ–¥: ${returnedCodes} (${returnRate}%)
–ü–æ–¥–µ–ª–∏–ª–∏—Å—å —Å –¥—Ä—É–≥–∏–º–∏: ${usersWhoShared} (${shareRate}%)

**‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:**
${avgWaitHours ? `–°—Ä–µ–¥–Ω–µ–µ: ${Math.round(avgWaitHours)} —á` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
${avgWaitHours ? `–í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: ${usersWithWaitTime.length}` : ''}

**üíé –°–µ–π—á–∞—Å:**
–ö–æ–¥–æ–≤ –≤ –ø—É–ª–µ: ${poolSize}
–í –æ—á–µ—Ä–µ–¥–∏: ${queueSize}
–ë–∞–ª–∞–Ω—Å: ${poolSize >= queueSize ? '‚úÖ –•–æ—Ä–æ—à–æ' : '‚ö†Ô∏è –ù—É–∂–Ω—ã –∫–æ–¥—ã'}

**üìä –©–µ–¥—Ä–æ—Å—Ç—å (–∫—Ç–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–∞–ª):**
1 —á–µ–ª–æ–≤–µ–∫: ${usageDistribution[1]} —á–µ–ª (–º–∏–Ω–∏–º—É–º)
2 —á–µ–ª–æ–≤–µ–∫–∞: ${usageDistribution[2]} —á–µ–ª
3 —á–µ–ª–æ–≤–µ–∫–∞: ${usageDistribution[3]} —á–µ–ª 
4 —á–µ–ª–æ–≤–µ–∫–∞: ${usageDistribution[4]} —á–µ–ª ‚öîÔ∏è (–º–∞–∫—Å–∏–º—É–º)
**–í—Å–µ–≥–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å: ${totalShared} –∏–∑ ${receivedInvites} (${Math.round(totalShared / Math.max(receivedInvites, 1) * 100)}%)**

**üî® –ú–æ–¥–µ—Ä–∞—Ü–∏—è:**
–ó–∞–±–∞–Ω–µ–Ω–æ –≤—Å–µ–≥–æ: ${bannedUsers.length}
–ê–≤—Ç–æ–±–∞–Ω–æ–≤: ${bannedUsers.filter(u => u.ban_reason?.includes('–ê–≤—Ç–æ–±–∞–Ω')).length}
–†—É—á–Ω—ã—Ö –±–∞–Ω–æ–≤: ${bannedUsers.filter(u => !u.ban_reason?.includes('–ê–≤—Ç–æ–±–∞–Ω')).length}

‚ö†Ô∏è **–ì–ò–ü–û–¢–ï–ó–ê: Shadow ban –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?**
–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ "–æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç" –∫–æ–¥—ã, –Ω–æ –∫–æ–¥—ã –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –±–∞–∑—É!
${bannedUsers.length > 0 ? '\n**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–∞–Ω—ã:**\n' + bannedUsers.slice(0, 3).map(u => `‚Ä¢ @${u.username.replace(/_/g, '\\_')}: ${u.ban_reason}`).join('\n') : ''}`;

    await ctx.reply(stat, { parse_mode: 'Markdown' });
    
    // ========== –ì–†–ê–§–ò–ö 1: –í–†–ï–ú–Ø –û–ñ–ò–î–ê–ù–ò–Ø (–ì–ò–°–¢–û–ì–†–ê–ú–ú–ê) ==========
    if (Object.keys(waitTimesByHour).length > 0) {
      const sortedHours = Object.keys(waitTimesByHour).map(Number).sort((a, b) => a - b);
      const waitCounts = sortedHours.map(h => waitTimesByHour[h]);
      
      const waitTimeChart = {
        type: 'bar',
        data: {
          labels: sortedHours.map(h => `${h}—á`),
          datasets: [{
            label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            data: waitCounts,
            backgroundColor: 'rgba(54, 162, 235, 0.8)'
          }]
        },
        options: {
          title: {
            display: true,
            text: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è',
            fontSize: 16
          },
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true,
                stepSize: 1
              }
            }]
          }
        }
      };
      
      const waitChartUrl = `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(waitTimeChart))}&width=800&height=400`;
      
      await ctx.replyWithPhoto({ url: waitChartUrl }, {
        caption: `‚è± **–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è**\n\n–°—Ä–µ–¥–Ω–µ–µ: ${Math.round(avgWaitHours || 0)} —á\n–í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: ${usersWithWaitTime.length}`
      });
    }
    
    // ========== –ì–†–ê–§–ò–ö 2: –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê 7 –î–ù–ï–ô ==========
    const activityDays = Object.keys(last7DaysActivity).sort();
    const invitesData = activityDays.map(day => last7DaysActivity[day].invites);
    const returnsData = activityDays.map(day => last7DaysActivity[day].returns);
    
    const activityChart = {
      type: 'line',
      data: {
        labels: activityDays.map(d => d.substring(5)), // MM-DD
        datasets: [
          {
            label: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–Ω–≤–∞–π—Ç–æ–≤',
            data: invitesData,
            borderColor: 'rgb(75, 192, 192)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            tension: 0.3
          },
          {
            label: '–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫–æ–¥–æ–≤',
            data: returnsData,
            borderColor: 'rgb(255, 99, 132)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            tension: 0.3
          }
        ]
      },
      options: {
        title: {
          display: true,
          text: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π',
          fontSize: 16
        },
        scales: {
          yAxes: [{
            ticks: {
              beginAtZero: true
            }
          }]
        }
      }
    };
    
    const activityChartUrl = `https://quickchart.io/chart?c=${encodeURIComponent(JSON.stringify(activityChart))}&width=800&height=400`;
    
    await ctx.replyWithPhoto({ url: activityChartUrl }, {
      caption: 'üìà **–î–∏–Ω–∞–º–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞ –Ω–µ–¥–µ–ª—é**'
    });
    
  } catch (error) {
    console.error('Error generating admin stats:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

async function handleBroadcast(ctx, text, bot) {
  const message = text.replace('/broadcast ', '');
  
  if (!message) {
    return ctx.reply('‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç');
  }
  
  const allUsers = await DB.getAllUsers();
  let successCount = 0;
  let failCount = 0;
  
  await ctx.reply(`üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  for (const user of allUsers) {
    try {
      await bot.telegram.sendMessage(user.telegram_id, message, { parse_mode: 'Markdown' });
      successCount++;
      await new Promise(resolve => setTimeout(resolve, 50));
    } catch (error) {
      failCount++;
      console.error(`Broadcast failed for ${user.telegram_id}:`, error.message);
    }
  }
  
  return ctx.reply(`‚úÖ –ì–æ—Ç–æ–≤–æ!\n–£—Å–ø–µ—à–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫: ${failCount}`);
}

async function handleRefundUser(ctx, text) {
  console.log('[Refund] Command received:', text);
  
  // –§–æ—Ä–º–∞—Ç: /refunduser @username TX_ID
  const parts = text.replace('/refunduser ', '').trim().split(/\s+/);
  
  if (parts.length < 2) {
    return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /refunduser @username TX_ID\n–ü—Ä–∏–º–µ—Ä: /refunduser @user123 abc123xyz');
  }
  
  const username = parts[0];
  const txId = parts[1];
  
  console.log('[Refund] Processing:', { username, txId });
  
  try {
    const user = await DB.getUserByUsername(username);
    if (!user) {
      return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    console.log('[Refund] User found:', user.telegram_id);
    
    const tx = await DB.getSoraTransaction(txId);
    if (!tx) {
      return ctx.reply(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${txId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    
    console.log('[Refund] Transaction found:', tx);
    
    if (tx.status === 'refunded') {
      return ctx.reply(`‚ö†Ô∏è –≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Ä–∞–Ω–µ–µ`);
    }
    
    if (!tx.telegram_charge_id) {
      return ctx.reply(`‚ùå Charge ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –†–µ—Ñ–∞–Ω–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.\n\nTX data: ${JSON.stringify(tx, null, 2)}`);
    }
    
    await ctx.reply(`‚è≥ –í—ã–ø–æ–ª–Ω—è—é —Ä–µ—Ñ–∞–Ω–¥ ${tx.stars_paid}‚≠ê –¥–ª—è @${user.username}...`);
    
    // –î–µ–ª–∞–µ–º —Ä–µ—Ñ–∞–Ω–¥
    console.log('[Refund] Calling refundStarPayment:', {
      userId: user.telegram_id,
      chargeId: tx.telegram_charge_id
    });
    
    await ctx.telegram.refundStarPayment(parseInt(user.telegram_id), tx.telegram_charge_id);
    
    console.log('[Refund] Refund successful');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await DB.updateSoraTransaction(txId, {
      status: 'refunded',
      refunded_by_admin: true,
      refunded_at: new Date()
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await ctx.telegram.sendMessage(
        parseInt(user.telegram_id),
        `‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç ${tx.stars_paid}‚≠ê\n\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${txId}\n\n–¢–≤–æ–∏ –∑–≤—ë–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
      );
    } catch (e) {
      console.error('[Refund] User notification failed:', e.message);
    }
    
    return ctx.reply(`‚úÖ –†–µ—Ñ–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω\n\nUser: @${user.username} (${user.telegram_id})\nTX: ${txId}\nStars: ${tx.stars_paid}‚≠ê\nCharge: ${tx.telegram_charge_id}`);
    
  } catch (error) {
    console.error('[Refund] Error:', error);
    return ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–∞–Ω–¥–∞: ${error.message}\n\nStack: ${error.stack}`);
  }
}
