import DB from '../database.js';
import { MESSAGES } from '../messages.js';
import config from '../config.js';

export function registerCallbacks(bot) {
  // –•–æ—á—É –∏–Ω–≤–∞–π—Ç
  bot.action('want_invite', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    if (!user) {
      return ctx.reply(MESSAGES.notInSystem, { parse_mode: 'Markdown' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ
    const position = await DB.getQueuePosition(userId);
    if (position && user.status === 'waiting') {
      return ctx.reply(MESSAGES.alreadyInQueue(position), { 
        parse_mode: 'Markdown' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø–æ–ª—É—á–∏–ª –ª–∏ —É–∂–µ –∏–Ω–≤–∞–π—Ç
    if (user.status === 'received' || user.status === 'completed') {
      return ctx.reply('‚úÖ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç!', { parse_mode: 'Markdown' });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    const settings = await DB.getSystemSettings();
    const codesRequired = settings.first_10_count < 10 ? 
      config.rules.first10CodesRequired : 
      config.rules.regularCodesRequired;
    
    await ctx.reply(MESSAGES.rules(codesRequired), {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'agree_rules' }],
          [{ text: '‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: 'cancel' }]
        ]
      },
      parse_mode: 'Markdown'
    });
  });

  // –°–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
  bot.action('agree_rules', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    if (!user) {
      return ctx.reply(MESSAGES.notInSystem, { parse_mode: 'Markdown' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ
    const existingPosition = await DB.getQueuePosition(userId);
    if (existingPosition) {
      return ctx.reply(MESSAGES.alreadyInQueue(existingPosition), { 
        parse_mode: 'Markdown' 
      });
    }
    
    const position = await DB.addToQueue(userId);
    const poolSize = await DB.getPoolSize();
    
    await ctx.reply(MESSAGES.addedToQueue(position, poolSize), { 
      parse_mode: 'Markdown' 
    });
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try {
      await bot.telegram.sendMessage(
        config.telegram.adminId,
        `‚ûï –ù–æ–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏: @${user.username} (–ø–æ–∑–∏—Ü–∏—è #${position})`
      );
    } catch (error) {
      console.error('Admin notification failed:', error.message);
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã
  bot.action('submit_codes', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    if (!user || user.status !== 'received') {
      return ctx.reply('‚ùå –¢—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç', { parse_mode: 'Markdown' });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –Ω—É–∂–Ω–æ
    const settings = await DB.getSystemSettings();
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –ø–æ–ª—É—á–∏–≤—à–∏—Ö –∏–Ω–≤–∞–π—Ç
    const allUsers = await DB.getAllUsers();
    const usersWithInvites = allUsers
      .filter(u => u.invite_sent_at)
      .sort((a, b) => {
        const timeA = a.invite_sent_at?.toDate?.() || new Date(0);
        const timeB = b.invite_sent_at?.toDate?.() || new Date(0);
        return timeA - timeB;
      });
    
    const userIndex = usersWithInvites.findIndex(u => u.telegram_id === String(userId)) + 1;
    const codesRequired = userIndex <= 10 ? 
      config.rules.first10CodesRequired : 
      config.rules.regularCodesRequired;
    
    const neededCodes = Math.max(0, codesRequired - user.codes_returned);
    
    if (neededCodes === 0) {
      return ctx.reply('‚úÖ –¢—ã —É–∂–µ –≤–µ—Ä–Ω—É–ª –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–¥—ã. –°–ø–∞—Å–∏–±–æ! üôè', { 
        parse_mode: 'Markdown' 
      });
    }
    
    await ctx.reply(MESSAGES.waitingForCodes(neededCodes), {
      parse_mode: 'Markdown'
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–æ–≤
    await DB.updateUser(userId, {
      awaiting_codes: true
    });
  });

  // –û—Ç–∫–∞–∑
  bot.action('cancel', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –Ω–∞–∂–º–∏ /start');
  });
}

