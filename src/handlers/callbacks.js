import DB from '../database.js';
import { getMessages } from '../messages.js';
import config from '../config.js';
import admin from 'firebase-admin';

const db = admin.firestore();

export function registerCallbacks(bot) {
  // –í—ã–±–æ—Ä —è–∑—ã–∫–∞
  bot.action(/^lang_(ru|en)$/, async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const language = ctx.match[1];
    
    await DB.updateUser(userId, { language });
    
    const MESSAGES = getMessages(language);
    
    await ctx.editMessageText(
      `${language === 'ru' ? '‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π' : '‚úÖ Language set: English'}\n\n${MESSAGES.welcome}`,
      {
        reply_markup: {
          inline_keyboard: [[
            { text: MESSAGES.buttons.wantInvite, callback_data: 'want_invite' }
          ]]
        },
        parse_mode: 'Markdown'
      }
    );
  });

  // –•–æ—á—É –∏–Ω–≤–∞–π—Ç
  bot.action('want_invite', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    if (!user) {
      return ctx.reply(MESSAGES.notInSystem, { parse_mode: 'Markdown' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ
    const position = await DB.getQueuePosition(userId);
    if (position && user.status === 'waiting') {
      return ctx.reply(MESSAGES.alreadyInQueue(position), { 
        parse_mode: 'Markdown' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø–æ–ª—É—á–∏–ª –ª–∏ —É–∂–µ –∏–Ω–≤–∞–π—Ç
    if (user.status === 'received' || user.status === 'completed') {
      const msg = user.language === 'en' ? '‚úÖ You already received an invite!' : '‚úÖ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç!';
      return ctx.reply(msg, { parse_mode: 'Markdown' });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    const settings = await DB.getSystemSettings();
    const codesRequired = settings.first_10_count < 10 ? 
      config.rules.first10CodesRequired : 
      config.rules.regularCodesRequired;
    
    await ctx.reply(MESSAGES.rules(codesRequired), {
      reply_markup: {
        inline_keyboard: [
          [{ text: MESSAGES.buttons.agree, callback_data: 'agree_rules' }],
          [{ text: MESSAGES.buttons.cancel, callback_data: 'cancel' }]
        ]
      },
      parse_mode: 'Markdown'
    });
  });

  // –°–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
  bot.action('agree_rules', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    if (!user) {
      return ctx.reply(MESSAGES.notInSystem, { parse_mode: 'Markdown' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ
    const existingPosition = await DB.getQueuePosition(userId);
    if (existingPosition) {
      return ctx.reply(MESSAGES.alreadyInQueue(existingPosition), { 
        parse_mode: 'Markdown' 
      });
    }
    
    const position = await DB.addToQueue(userId);
    const poolSize = await DB.getPoolSize();
    
    await ctx.reply(MESSAGES.addedToQueue(position, poolSize), { 
      parse_mode: 'Markdown' 
    });
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try {
      await bot.telegram.sendMessage(
        config.telegram.adminId,
        `‚ûï –ù–æ–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏: @${user.username} (–ø–æ–∑–∏—Ü–∏—è #${position}, —è–∑—ã–∫: ${user.language})`
      );
    } catch (error) {
      console.error('Admin notification failed:', error.message);
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã
  bot.action('submit_codes', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    if (!user || user.status !== 'received') {
      const msg = user?.language === 'en' ? '‚ùå You haven\'t received an invite yet' : '‚ùå –¢—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç';
      return ctx.reply(msg, { parse_mode: 'Markdown' });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –Ω—É–∂–Ω–æ
    const settings = await DB.getSystemSettings();
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –ø–æ–ª—É—á–∏–≤—à–∏—Ö –∏–Ω–≤–∞–π—Ç
    const allUsers = await DB.getAllUsers();
    const usersWithInvites = allUsers
      .filter(u => u.invite_sent_at)
      .sort((a, b) => {
        const timeA = a.invite_sent_at?.toDate?.() || new Date(0);
        const timeB = b.invite_sent_at?.toDate?.() || new Date(0);
        return timeA - timeB;
      });
    
    const userIndex = usersWithInvites.findIndex(u => u.telegram_id === String(userId)) + 1;
    const codesRequired = userIndex <= 10 ? 
      config.rules.first10CodesRequired : 
      config.rules.regularCodesRequired;
    
    const neededCodes = Math.max(0, codesRequired - user.codes_returned);
    
    if (neededCodes === 0) {
      const msg = user.language === 'en' 
        ? '‚úÖ You\'ve already returned all required codes. Thank you! üôè' 
        : '‚úÖ –¢—ã —É–∂–µ –≤–µ—Ä–Ω—É–ª –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–¥—ã. –°–ø–∞—Å–∏–±–æ! üôè';
      return ctx.reply(msg, { parse_mode: 'Markdown' });
    }
    
    await ctx.reply(MESSAGES.waitingForCodes(codesRequired, user.codes_returned || 0), {
      parse_mode: 'Markdown'
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–æ–≤ –∏ –°–ë–†–ê–°–´–í–ê–ï–ú –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    await DB.updateUser(userId, {
      awaiting_codes: true,
      awaiting_donation: false,
      awaiting_unused_return: false,
      awaiting_donation_usage: false
    });
  });

  // –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∫–æ–¥—ã
  bot.action('donate_codes', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    await ctx.reply(MESSAGES.donateCodesPrompt(user?.language || 'ru'), {
      parse_mode: 'Markdown'
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–Ω–µ–π—à–µ–Ω –∫–æ–¥–æ–≤
    await DB.updateUser(userId, {
      awaiting_donation: true
    });
  });

  // –í–µ—Ä–Ω—É—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–≤–∞–π—Ç
  bot.action('return_unused', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    if (!user || user.status !== 'received') {
      const msg = user?.language === 'en' 
        ? '‚ùå You haven\'t received an invite yet' 
        : '‚ùå –¢—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç';
      return ctx.reply(msg, { parse_mode: 'Markdown' });
    }
    
    await ctx.reply(MESSAGES.returnUnusedPrompt(user?.language || 'ru'), {
      parse_mode: 'Markdown'
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
    await DB.updateUser(userId, {
      awaiting_unused_return: true
    });
  });

  // –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–µ—Ä–∞–±–æ—á–∏–π –∏–Ω–≤–∞–π—Ç
  bot.action('report_invalid', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    if (!user || !user.invite_code_given) {
      const msg = user?.language === 'en' 
        ? '‚ùå You haven\'t received an invite yet' 
        : '‚ùå –¢—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –∏–Ω–≤–∞–π—Ç';
      return ctx.reply(msg);
    }
    
    const code = user.invite_code_given;
    
    // –ó–ê–©–ò–¢–ê 1: –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–∞–π—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 2)
    const currentInvites = user.invites_received_count || 0;
    if (currentInvites >= 2) {
      const msg = user?.language === 'en'
        ? '‚ùå Max invites reached (2). You cannot request more.'
        : '‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–Ω–≤–∞–π—Ç–æ–≤ (2). –ë–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–µ–ª—å–∑—è.';
      return ctx.reply(msg);
    }
    
    // –ó–ê–©–ò–¢–ê 2: –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± (–º–∞–∫—Å–∏–º—É–º 3)
    const totalReports = user.invalid_codes_reported?.length || 0;
    if (totalReports >= 3) {
      const msg = user?.language === 'en'
        ? '‚ö†Ô∏è You\'ve reported 3 codes already. This seems suspicious.\n\nPlease contact admin if you really have issues.'
        : '‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ 3 –∫–æ–¥–∞. –≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ.\n\n–°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.';
      return ctx.reply(msg);
    }
    
    // –ó–ê–©–ò–¢–ê 3: Cooldown - –ø–æ—Å–ª–µ–¥–Ω—è—è –∂–∞–ª–æ–±–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    if (user.last_report_time) {
      const lastReport = user.last_report_time.toDate ? user.last_report_time.toDate() : new Date(user.last_report_time);
      const minutesSinceLastReport = (new Date() - lastReport) / (1000 * 60);
      
      if (minutesSinceLastReport < 10) {
        const msg = user?.language === 'en'
          ? `‚ö†Ô∏è Please wait ${Math.ceil(10 - minutesSinceLastReport)} more minutes before reporting again.`
          : `‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë ${Math.ceil(10 - minutesSinceLastReport)} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∂–∞–ª–æ–±–æ–π.`;
        return ctx.reply(msg);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ –∂–∞–ª–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ –Ω–∞ —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
    if (user.invalid_codes_reported?.includes(code)) {
      // –£–∂–µ –∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥ - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
      await DB.addToQueue(userId);
      
      const msg = user?.language === 'en'
        ? '‚úÖ You already reported this code. Added you back to queue for a different code!'
        : '‚úÖ –¢—ã —É–∂–µ –∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥. –î–æ–±–∞–≤–∏–ª —Ç–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –¥—Ä—É–≥–æ–π –∫–æ–¥!';
      return ctx.reply(msg);
    }
    
    await ctx.reply(MESSAGES.reportInvalidPrompt(code, user?.language || 'ru'), {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: MESSAGES.buttons.codeInvalid, callback_data: `confirm_invalid_${code}` }],
          [{ text: MESSAGES.buttons.cancel, callback_data: 'cancel' }]
        ]
      }
    });
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –Ω–∞ –Ω–µ—Ä–∞–±–æ—á–∏–π –∫–æ–¥
  bot.action(/^confirm_invalid_(.+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const code = ctx.match[1];
    const user = await DB.getUser(userId);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    try {
      // –û—Ç–º–µ—á–∞–µ–º –∂–∞–ª–æ–±—É
      await DB.updateUser(userId, {
        invalid_codes_reported: [...(user.invalid_codes_reported || []), code]
      });
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∫—Ç–æ –ø–æ–ª—É—á–∏–ª —ç—Ç–æ—Ç –∫–æ–¥
      const allUsers = await DB.getAllUsers();
      const affectedUsers = allUsers.filter(u => 
        u.invite_code_given === code && 
        u.telegram_id !== String(userId)
      );
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –Ω–∏—Ö
      if (affectedUsers.length > 0) {
        for (const affectedUser of affectedUsers) {
          try {
            const msg = getMessages(affectedUser.language || 'ru');
            await bot.telegram.sendMessage(
              affectedUser.telegram_id,
              msg.invalidCodeConfirm(code, affectedUser.language),
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: msg.buttons.codeWorks, callback_data: `code_works_${code}` }],
                    [{ text: msg.buttons.codeInvalid, callback_data: `code_invalid_${code}` }]
                  ]
                }
              }
            );
          } catch (error) {
            console.error(`Failed to notify user ${affectedUser.telegram_id}:`, error.message);
          }
        }
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∞–≤—Ç–æ—Ä–∞ –∫–æ–¥–∞
      const poolEntries = await db.collection('invite_pool')
        .where('code', '==', code)
        .get();
      
      if (!poolEntries.empty) {
        const authorId = poolEntries.docs[0].data().submitted_by;
        
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä - —Å–∏—Å—Ç–µ–º–∞/–∞–¥–º–∏–Ω/donation
        if (!authorId.includes('admin') && !authorId.includes('system') && !authorId.includes('donation') && !authorId.includes('unused')) {
          try {
            const author = await DB.getUser(authorId);
            if (author) {
              const authorMsg = getMessages(author.language || 'ru');
              await bot.telegram.sendMessage(
                author.telegram_id,
                authorMsg.authorWarning(code, 1, author.language),
                { parse_mode: 'Markdown' }
              );
            }
          } catch (error) {
            console.error(`Failed to notify author ${authorId}:`, error.message);
          }
        }
      }
      
      // –î–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ø—É–ª–µ
      const currentInvites = user.invites_received_count || 0;
      
      if (currentInvites >= 2) {
        await ctx.editMessageText(MESSAGES.maxInvitesReached(user?.language || 'ru'), {
          parse_mode: 'Markdown'
        });
        return;
      }
      
      const msg = user?.language === 'en'
        ? `‚úÖ Report received. We're checking with other users and notifying the author.\n\nYou'll get a new invite soon!`
        : `‚úÖ –ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞.\n\n–°–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—à—å –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç!`;
      
      await ctx.editMessageText(msg);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      await DB.addToQueue(userId);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      try {
        await bot.telegram.sendMessage(
          config.telegram.adminId,
          `üö´ –ñ–∞–ª–æ–±–∞ –Ω–∞ –∫–æ–¥ –æ—Ç @${user.username}\n–ö–æ–¥: ${code}\n–î—Ä—É–≥–∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${affectedUsers.length}`
        );
      } catch (error) {
        console.error('Admin notification failed:', error.message);
      }
      
    } catch (error) {
      console.error('Error processing invalid code report:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    }
  });

  // –û—Ç–≤–µ—Ç: –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
  bot.action(/^code_works_(.+)$/, async (ctx) => {
    await ctx.answerCbQuery('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!');
    
    const code = ctx.match[1];
    
    const msg = ctx.from.language_code === 'ru'
      ? `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–Ω–∞—á–∏—Ç –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n–í–æ–∑–º–æ–∂–Ω–æ —É –∂–∞–ª—É—é—â–µ–≥–æ—Å—è –±—ã–ª–∞ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞.`
      : `‚úÖ Great! So the code works.\n\nMaybe the reporter had a different issue.`;
    
    await ctx.editMessageText(msg);
  });

  // –û—Ç–≤–µ—Ç: –∫–æ–¥ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç
  bot.action(/^code_invalid_(.+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const code = ctx.match[1];
    const user = await DB.getUser(userId);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    try {
      // –û—Ç–º–µ—á–∞–µ–º –∂–∞–ª–æ–±—É
      await DB.updateUser(userId, {
        invalid_codes_reported: [...(user.invalid_codes_reported || []), code]
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–Ω–≤–∞–π—Ç–æ–≤
      const currentInvites = user.invites_received_count || 0;
      
      if (currentInvites >= 2) {
        await ctx.editMessageText(MESSAGES.maxInvitesReached(user?.language || 'ru'), {
          parse_mode: 'Markdown'
        });
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
      await DB.addToQueue(userId);
      
      const msg = user?.language === 'en'
        ? `‚úÖ Confirmed. You'll get a new invite soon!`
        : `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –°–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—à—å –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç!`;
      
      await ctx.editMessageText(msg);
      
    } catch (error) {
      console.error('Error confirming invalid code:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞.');
    }
  });

  // –†–æ—Ö–∞–Ω —è–≤–∏—Ç—Å—è –Ω–∞ –ø–æ–º–æ—â—å –ì–æ–Ω–¥–æ—Ä—É!
  bot.action('rohan_answers', async (ctx) => {
    await ctx.answerCbQuery('‚öîÔ∏è –ó–∞ –†–æ—Ö–∞–Ω!');
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "message not modified")
    const promptText = user?.language === 'en'
      ? `üíù **Donate Code**

**Where to find code:**
‚Üí Web: ‚ãÆ ‚Üí Invite Friends
‚Üí App: "4 invites" ‚Üí Share

Send code ‚Üí choose how many uses to share.

Thanks! üôè`
      : `üíù **–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∫–æ–¥**

**–ì–¥–µ –≤–∑—è—Ç—å –∫–æ–¥:**
‚Üí –í–µ–±: ‚ãÆ ‚Üí Invite Friends
‚Üí –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: "4 invites" ‚Üí Share

–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ ‚Üí –≤—ã–±–µ—Ä–µ—à—å —Å–∫–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.

–°–ø–∞—Å–∏–±–æ! üôè`;
    
    await ctx.reply(promptText, {
      parse_mode: 'Markdown'
    });
    
    await DB.updateUser(userId, {
      awaiting_donation: true,
      awaiting_donation_usage: false,
      awaiting_codes: false,
      awaiting_unused_return: false
    });
  });

  // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–æ–±—ã—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç)
  bot.action(/^usage_([1-4])$/, async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    const usageCount = parseInt(ctx.match[1]);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    if (!user || !user.pending_code) {
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const code = user.pending_code;
    
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –ø—É–ª —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
      const addedCount = await DB.addCodesToPoolWithLimit(code, user.telegram_id, usageCount);
      
      if (addedCount === 0) {
        const msg = user.language === 'en'
          ? '‚ùå This code has already been added to the pool'
          : '‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É–ª';
        return ctx.reply(msg);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await DB.updateUser(user.telegram_id, {
        codes_returned: 1,
        codes_submitted: [code],
        pending_code: null,
        awaiting_usage_choice: false,
        usage_count_shared: usageCount,
        status: 'completed'
      });
      
      const remaining = 4 - usageCount;
      const msg = user.language === 'en'
        ? `‚úÖ Done!

Code: \`${code}\`
Shared: **${usageCount}** / Yours: **${remaining}**

Up to ${usageCount} people will get access through bot. You're all set! üéâ`
        : `‚úÖ –ì–æ—Ç–æ–≤–æ!

–ö–æ–¥: \`${code}\`
–í –±–æ—Ç: **${usageCount}** / –¢–µ–±–µ: **${remaining}**

–î–æ ${usageCount} ${usageCount === 1 ? '—á–µ–ª–æ–≤–µ–∫–∞' : '—á–µ–ª–æ–≤–µ–∫'} –ø–æ–ª—É—á–∞—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±–æ—Ç. –í—Å—ë! üéâ`;
      
      await ctx.editMessageText(msg, { parse_mode: 'Markdown' });
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      try {
        await ctx.telegram.sendMessage(
          config.telegram.adminId,
          `‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω –æ—Ç @${user.username}:\n–ö–æ–¥: ${code}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${usageCount} (–¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —Ä–∞–∑)`
        );
      } catch (error) {
        console.error('Admin notification failed:', error.message);
      }
    } catch (error) {
      console.error('Error processing usage choice:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
    }
  });

  // –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ)
  bot.action(/^donation_usage_([1-4])$/, async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    const usageCount = parseInt(ctx.match[1]);
    
    const MESSAGES = getMessages(user?.language || 'ru');
    
    if (!user || !user.pending_donation_code) {
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const code = user.pending_donation_code;
    
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ –ø—É–ª –∫–∞–∫ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ
      const addedCount = await DB.addCodesToPoolWithLimit(code, `donation:${user.telegram_id}`, usageCount);
      
      if (addedCount === 0) {
        const msg = user.language === 'en'
          ? '‚ùå This code has already been added to the pool'
          : '‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É–ª';
        return ctx.reply(msg);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
      await DB.updateUser(user.telegram_id, {
        pending_donation_code: null,
        awaiting_donation_usage: false
      });
      
      const remaining = 4 - usageCount;
      const msg = user.language === 'en'
        ? `‚úÖ Thanks for donation!

Code: \`${code}\`
Donated: **${usageCount}** / Yours: **${remaining}**

Up to ${usageCount} people will register thanks to you! üéâ`
        : `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!

–ö–æ–¥: \`${code}\`
–í –±–æ—Ç: **${usageCount}** / –¢–µ–±–µ: **${remaining}**

–î–æ ${usageCount} ${usageCount === 1 ? '—á–µ–ª–æ–≤–µ–∫–∞' : '—á–µ–ª–æ–≤–µ–∫'} –ø–æ–ª—É—á–∞—Ç –¥–æ—Å—Ç—É–ø! üéâ`;
      
      await ctx.editMessageText(msg, { parse_mode: 'Markdown' });
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      try {
        await ctx.telegram.sendMessage(
          config.telegram.adminId,
          `üíù –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç @${user.username}:\n–ö–æ–¥: ${code}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${usageCount} (–¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —Ä–∞–∑)`
        );
      } catch (error) {
        console.error('Admin notification failed:', error.message);
      }
    } catch (error) {
      console.error('Error processing donation:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
    }
  });

  // –û—Ç–∫–∞–∑
  bot.action('cancel', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await DB.getUser(userId);
    
    const msg = user?.language === 'en' 
      ? 'Okay, if you change your mind - click /start' 
      : '–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –Ω–∞–∂–º–∏ /start';
    
    await ctx.reply(msg);
  });
}
