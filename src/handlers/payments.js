import DB from '../database.js';
import { getMessages } from '../messages.js';
import { createSoraVideo, pollSoraVideo, soraQueue } from '../sora.js';
import config from '../config.js';

export function registerPaymentHandlers(bot) {
  // Pre-checkout query (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π)
  bot.on('pre_checkout_query', async (ctx) => {
    console.log('[Payment] Pre-checkout query:', ctx.preCheckoutQuery);
    
    try {
      // –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º (–≤–∞–ª–∏–¥–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ invoice)
      await ctx.answerPreCheckoutQuery(true);
    } catch (error) {
      console.error('[Payment] Pre-checkout error:', error);
      await ctx.answerPreCheckoutQuery(false, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
    }
  });

  // Successful payment (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
  bot.on('message', async (ctx, next) => {
    if (!ctx.message.successful_payment) return next();
    
    const payment = ctx.message.successful_payment;
    const userId = ctx.from.id;
    
    console.log('[Payment] Successful payment:', {
      userId,
      stars: payment.total_amount,
      payload: payment.invoice_payload,
      chargeId: payment.telegram_payment_charge_id
    });
    
    try {
      const payloadData = JSON.parse(payment.invoice_payload);
      const user = await DB.getUser(userId);
      const MESSAGES = getMessages(user?.language || 'ru');
      
      if (payloadData.type === 'sora_generation') {
        // –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const tx = await DB.createSoraTransaction(userId, {
          type: 'single',
          stars: payment.total_amount,
          mode: payloadData.mode,
          bundleCount: 1,
          videoIds: []
        });
        
        await DB.updateSoraTransaction(tx.id, {
          telegram_charge_id: payment.telegram_payment_charge_id
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const pending = user.sora_pending_payment;
        if (!pending) {
          return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        await ctx.reply(`‚úÖ –û–ø–ª–∞—Ç–∞ ${payment.total_amount}‚≠ê –ø—Ä–∏–Ω—è—Ç–∞!\n\n${MESSAGES.generationQueued}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–∞—á–∞–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        try {
          await bot.telegram.sendMessage(
            config.telegram.adminId,
            `üí´ –ù–æ–≤–∞—è Sora –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n\nUser: @${user.username} (${userId})\nTX: ${tx.id}\nMode: ${payloadData.model}, ${payloadData.duration}—Å\nStars: ${payment.total_amount}‚≠ê\nCharge: ${payment.telegram_payment_charge_id}`
          );
        } catch (e) {
          console.error('[Payment] Admin notification failed:', e.message);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        const { prompt, model, duration, width, height } = pending;
        
        // –†–∞—Å—á—ë—Ç ETA
        let eta = '3-5 –º–∏–Ω—É—Ç';
        if (model === 'sora-2-pro') {
          if (duration >= 12) eta = '10-15 –º–∏–Ω—É—Ç';
          else if (duration >= 8) eta = '7-10 –º–∏–Ω—É—Ç';
          else eta = '5-7 –º–∏–Ω—É—Ç';
        } else {
          if (duration >= 12) eta = '5-8 –º–∏–Ω—É—Ç';
          else if (duration >= 8) eta = '3-5 –º–∏–Ω—É—Ç';
          else eta = '1-3 –º–∏–Ω—É—Ç—ã';
        }
        
        soraQueue.enqueue(async () => {
          try {
            let lastStatusMsg = null;
            await ctx.reply(MESSAGES.generationStarted(eta));
            const create = await createSoraVideo({ model, prompt, durationSeconds: duration, width, height });
            console.log('[Sora] Video created, ID:', create.id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await DB.updateSoraTransaction(tx.id, {
              videos_generated: [create.id],
              videos_remaining: 0
            });
            
            // –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            const result = await pollSoraVideo(create.id, (progress, elapsed) => {
              // -1 = –≤ queued –æ–∂–∏–¥–∞–Ω–∏–∏
              if (progress === -1 && elapsed % 120 < 6) {
                const msg = `‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ OpenAI... (${Math.round(elapsed / 60)} –º–∏–Ω)\n\nAPI –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –∂–¥—ë–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞.`;
                if (msg !== lastStatusMsg) {
                  ctx.reply(msg).catch(() => {});
                  lastStatusMsg = msg;
                }
              }
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞—Ö
              else if ([40, 66, 89].includes(progress)) {
                const msg = `‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%...`;
                if (msg !== lastStatusMsg) {
                  ctx.reply(msg).catch(() => {});
                  lastStatusMsg = msg;
                }
              }
            });
            console.log('[Sora] Video completed, downloading content...');
            
            const contentResp = await fetch(`https://api.openai.com/v1/videos/${create.id}/content`, {
              headers: { 'Authorization': `Bearer ${config.sora.openaiApiKey}` }
            });
            if (!contentResp.ok) {
              throw new Error(`Content download failed: ${contentResp.status}`);
            }
            const videoBuffer = await contentResp.arrayBuffer();
            console.log('[Sora] Video downloaded, size:', videoBuffer.byteLength, 'bytes');
            
            const sentMsg = await ctx.replyWithDocument(
              { source: Buffer.from(videoBuffer), filename: `sora_${create.id}.mp4` },
              { caption: `${MESSAGES.generationSuccess}\n\nüìä ${model}, ${duration}—Å, ${width}x${height}\n\n‚ùì –ü—Ä–æ–±–ª–µ–º—ã? ‚Üí ${config.telegram.soraUsername}` }
            );
            
            console.log('[Sora] Message sent, structure:', JSON.stringify({
              message_id: sentMsg.message_id,
              document: sentMsg.document ? {
                file_id: sentMsg.document.file_id,
                file_unique_id: sentMsg.document.file_unique_id,
                file_size: sentMsg.document.file_size
              } : 'no document'
            }, null, 2));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            const fileId = sentMsg.document?.file_id;
            if (fileId) {
              await DB.updateSoraTransaction(tx.id, {
                telegram_file_ids: [fileId],
                delivery_confirmed: true
              });
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ + –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            try {
              const safeUsername = (user.username || 'anonymous').replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
              await ctx.telegram.sendMessage(
                config.telegram.adminId,
                `‚úÖ Sora –≤–∏–¥–µ–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n\nUser: @${safeUsername} \\(${userId}\\)\nTX: ${tx.id}\nVideo: ${create.id}\nFile ID: ${fileId || 'N/A'}\nStars: ${payment.total_amount}‚≠ê\nMode: ${model}, ${duration}—Å, ${width}x${height}\nSize: ${Math.round(videoBuffer.byteLength / 1024)}KB`
              );
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É
              if (fileId) {
                await ctx.telegram.sendDocument(config.telegram.adminId, fileId);
              } else {
                // –ï—Å–ª–∏ file_id –Ω–µ –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
                await ctx.telegram.sendDocument(config.telegram.adminId, {
                  source: Buffer.from(videoBuffer),
                  filename: `sora_${create.id}.mp4`
                });
              }
            } catch (e) {
              console.error('[Payment] Admin notification failed:', e.message);
            }
          } catch (err) {
            console.error('Sora generation error:', err);
            
            // –ï—Å–ª–∏ failed –∏–∑-–∑–∞ policy violation - –ù–ï –¥–µ–ª–∞–µ–º retry, —Å—Ä–∞–∑—É —Ä–µ—Ñ–∞–Ω–¥
            if (err.message.includes('failed: failed')) {
              console.log('[Sora] Video rejected by OpenAI (policy violation), immediate refund');
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º retry, –∏–¥—ë–º —Å—Ä–∞–∑—É –∫ —Ä–µ—Ñ–∞–Ω–¥—É
            } else {
              // AUTO-RETRY: –µ—Å–ª–∏ –±—ã–ª —É—Å–∏–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
              const wasEnhanced = pending.isEnhanced;
              const originalPrompt = user.sora_original_prompt;
              
              if (wasEnhanced && originalPrompt && (err.message.includes('stuck') || err.message.includes('500'))) {
              console.log('[Sora] Enhanced prompt failed, retrying with original...');
              try {
                await ctx.reply('üîÑ –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª. –ü—Ä–æ–±—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π...');
                const retryCreate = await createSoraVideo({ model, prompt: originalPrompt, durationSeconds: duration, width, height });
                const retryResult = await pollSoraVideo(retryCreate.id, progressCallback);
                
                const retryContentResp = await fetch(`https://api.openai.com/v1/videos/${retryCreate.id}/content`, {
                  headers: { 'Authorization': `Bearer ${config.sora.openaiApiKey}` }
                });
                if (retryContentResp.ok) {
                  const retryBuffer = await retryContentResp.arrayBuffer();
                  const retrySentMsg = await ctx.replyWithDocument(
                    { source: Buffer.from(retryBuffer), filename: `sora_${retryCreate.id}.mp4` },
                    { caption: `${MESSAGES.generationSuccess} (retry —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º)\n\nüìä ${model}, ${duration}—Å, ${width}x${height}\n\n‚ùì –ü—Ä–æ–±–ª–µ–º—ã? ‚Üí ${config.telegram.soraUsername}` }
                  );
                  
                  await DB.updateSoraTransaction(tx.id, {
                    videos_generated: [retryCreate.id],
                    telegram_file_ids: [retrySentMsg.document?.file_id].filter(Boolean),
                    delivery_confirmed: true,
                    retry_count: 1
                  });
                  
                  await ctx.telegram.sendMessage(config.telegram.adminId, 
                    `‚úÖ Sora retry —É—Å–ø–µ—à–µ–Ω\n\nUser: @${user.username}\nTX: ${tx.id}\nRetry video: ${retryCreate.id}\nOriginal failed, used fallback prompt`
                  );
                  
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –∞–¥–º–∏–Ω—É
                  if (retrySentMsg.document?.file_id) {
                    await ctx.telegram.sendDocument(config.telegram.adminId, retrySentMsg.document.file_id);
                  }
                  
                  return; // –£—Å–ø–µ—Ö, –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ —Ä–µ—Ñ–∞–Ω–¥–∞
                }
              } catch (retryErr) {
                  console.error('[Sora] Retry failed:', retryErr);
                  await ctx.reply('‚ùå Retry —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è. –î–µ–ª–∞–µ–º —Ä–µ—Ñ–∞–Ω–¥...');
                }
              }
            }
            
            // –†–µ—Ñ–∞–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ (—á–µ—Ä–µ–∑ raw API, Telegraf 4.15 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç refundStarPayment)
            try {
              const refundResp = await fetch(`https://api.telegram.org/bot${config.telegram.token}/refundStarPayment`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  user_id: userId,
                  telegram_payment_charge_id: payment.telegram_payment_charge_id
                })
              });
              const refundData = await refundResp.json();
              if (!refundData.ok) {
                throw new Error(`Refund failed: ${JSON.stringify(refundData)}`);
              }
              
              // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
              let errorMsg = MESSAGES.generationFailed(err.message || 'unknown');
              if (err.message && err.message.includes('failed: failed')) {
                errorMsg = user?.language === 'en'
                  ? 'üö´ **Content Rejected**\n\nOpenAI rejected this video (policy violation).\n\nTry a different prompt without offensive/explicit content.'
                  : 'üö´ **–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω**\n\nOpenAI –æ—Ç–∫–ª–æ–Ω–∏–ª —ç—Ç–æ –≤–∏–¥–µ–æ (–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª).\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–≥–æ/–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.';
              }
              
              await ctx.reply(`${errorMsg}\n\n${MESSAGES.paymentRefunded(payment.total_amount)}\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /generate`);
              
              // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ –∏ —Ä–µ—Ñ–∞–Ω–¥–µ
              await ctx.telegram.sendMessage(
                config.telegram.adminId,
                `‚ùå Sora –æ—à–∏–±–∫–∞ + —Ä–µ—Ñ–∞–Ω–¥\n\nUser: @${user.username}\nTX: ${tx.id}\nStars: ${payment.total_amount}‚≠ê (–≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã)\nError: ${err.message}\nCharge: ${payment.telegram_payment_charge_id}`
              );
              
              await DB.updateSoraTransaction(tx.id, {
                status: 'refunded',
                error_message: err.message
              });
            } catch (refundErr) {
              console.error('[Payment] Refund failed:', refundErr);
              await ctx.reply(`${MESSAGES.generationFailed(err.message || 'unknown')}\n\n‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è. –°–≤—è–∂–∏—Å—å —Å ${config.telegram.soraUsername} –¥–ª—è —Ä–µ—Ñ–∞–Ω–¥–∞.`);
              
              // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
              await ctx.telegram.sendMessage(
                config.telegram.adminId,
                `üö® –ö–†–ò–¢–ò–ß–ù–û: –†–µ—Ñ–∞–Ω–¥ –Ω–µ —É–¥–∞–ª—Å—è!\n\nUser: @${user.username}\nTX: ${tx.id}\nStars: ${payment.total_amount}‚≠ê\nCharge: ${payment.telegram_payment_charge_id}\n\n–ù—É–∂–µ–Ω —Ä—É—á–Ω–æ–π —Ä–µ—Ñ–∞–Ω–¥!`
              );
            }
          }
        });
        
        // –û—á–∏—â–∞–µ–º pending
        await DB.updateUser(userId, {
          sora_pending_payment: null,
          sora_pending_mode: null,
          sora_original_prompt: null,
          sora_enhanced_prompt: null
        });
      }
    } catch (error) {
      console.error('[Payment] Processing error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º.');
    }
  });
}
