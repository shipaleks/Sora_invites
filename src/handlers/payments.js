import DB from '../database.js';
import { getMessages } from '../messages.js';
import { createSoraVideo, pollSoraVideo, soraQueue } from '../sora.js';
import config from '../config.js';

export function registerPaymentHandlers(bot) {
  // Pre-checkout query (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π)
  bot.on('pre_checkout_query', async (ctx) => {
    console.log('[Payment] Pre-checkout query:', ctx.preCheckoutQuery);
    
    try {
      // –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º (–≤–∞–ª–∏–¥–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ invoice)
      await ctx.answerPreCheckoutQuery(true);
    } catch (error) {
      console.error('[Payment] Pre-checkout error:', error);
      await ctx.answerPreCheckoutQuery(false, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
    }
  });

  // Successful payment (–ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
  bot.on('message', async (ctx, next) => {
    if (!ctx.message.successful_payment) return next();
    
    const payment = ctx.message.successful_payment;
    const userId = ctx.from.id;
    
    console.log('[Payment] Successful payment:', {
      userId,
      stars: payment.total_amount,
      payload: payment.invoice_payload,
      chargeId: payment.telegram_payment_charge_id
    });
    
    try {
      const payloadData = JSON.parse(payment.invoice_payload);
      const user = await DB.getUser(userId);
      const MESSAGES = getMessages(user?.language || 'ru');
      
      if (payloadData.type === 'sora_generation') {
        // –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const tx = await DB.createSoraTransaction(userId, {
          type: 'single',
          stars: payment.total_amount,
          mode: payloadData.mode,
          bundleCount: 1,
          videoIds: []
        });
        
        await DB.updateSoraTransaction(tx.id, {
          telegram_charge_id: payment.telegram_payment_charge_id
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const pending = user.sora_pending_payment;
        if (!pending) {
          return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        await ctx.reply(`‚úÖ –û–ø–ª–∞—Ç–∞ ${payment.total_amount}‚≠ê –ø—Ä–∏–Ω—è—Ç–∞!\n\n${MESSAGES.generationQueued}`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        const { prompt, model, duration, width, height } = pending;
        
        // –†–∞—Å—á—ë—Ç ETA
        let eta = '3-5 –º–∏–Ω—É—Ç';
        if (model === 'sora-2-pro') {
          if (duration >= 12) eta = '10-15 –º–∏–Ω—É—Ç';
          else if (duration >= 8) eta = '7-10 –º–∏–Ω—É—Ç';
          else eta = '5-7 –º–∏–Ω—É—Ç';
        } else {
          if (duration >= 12) eta = '5-8 –º–∏–Ω—É—Ç';
          else if (duration >= 8) eta = '3-5 –º–∏–Ω—É—Ç';
          else eta = '1-3 –º–∏–Ω—É—Ç—ã';
        }
        
        soraQueue.enqueue(async () => {
          try {
            let lastStatusMsg = null;
            await ctx.reply(MESSAGES.generationStarted(eta));
            const create = await createSoraVideo({ model, prompt, durationSeconds: duration, width, height });
            console.log('[Sora] Video created, ID:', create.id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await DB.updateSoraTransaction(tx.id, {
              videos_generated: [create.id],
              videos_remaining: 0
            });
            
            // –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            const result = await pollSoraVideo(create.id, (progress, elapsed) => {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞—Ö
              if (elapsed % 60 < 6 || [40, 66, 89, 100].includes(progress)) {
                const msg = `‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%... (${Math.round(elapsed / 60)} –º–∏–Ω)`;
                if (msg !== lastStatusMsg) {
                  ctx.reply(msg).catch(() => {});
                  lastStatusMsg = msg;
                }
              }
            });
            console.log('[Sora] Video completed, downloading content...');
            
            const contentResp = await fetch(`https://api.openai.com/v1/videos/${create.id}/content`, {
              headers: { 'Authorization': `Bearer ${config.sora.openaiApiKey}` }
            });
            if (!contentResp.ok) {
              throw new Error(`Content download failed: ${contentResp.status}`);
            }
            const videoBuffer = await contentResp.arrayBuffer();
            console.log('[Sora] Video downloaded, size:', videoBuffer.byteLength, 'bytes');
            
            await ctx.replyWithDocument(
              { source: Buffer.from(videoBuffer), filename: `sora_${create.id}.mp4` },
              { caption: `${MESSAGES.generationSuccess}\n\nüìä ${model}, ${duration}—Å, ${width}x${height}` }
            );
          } catch (err) {
            console.error('Sora generation error:', err);
            await ctx.reply(MESSAGES.generationFailed(err.message || 'unknown'));
            
            // –†–µ—Ñ–∞–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const refund = await bot.telegram.refundStarPayment(userId, payment.telegram_payment_charge_id);
            if (refund) {
              await ctx.reply(MESSAGES.paymentRefunded(payment.total_amount));
            }
          }
        });
        
        // –û—á–∏—â–∞–µ–º pending
        await DB.updateUser(userId, {
          sora_pending_payment: null,
          sora_pending_mode: null,
          sora_original_prompt: null,
          sora_enhanced_prompt: null
        });
      }
    } catch (error) {
      console.error('[Payment] Processing error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º.');
    }
  });
}
