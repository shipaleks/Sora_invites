import admin from 'firebase-admin';
import { readFileSync } from 'fs';
import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';

dotenv.config();

// –ó–∞–≥—Ä—É–∂–∞–µ–º credentials
const serviceAccount = JSON.parse(
  readFileSync('./sora-invite-bot-firebase-adminsdk-fbsvc-cb61b27933.json', 'utf8')
);

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

// –¢–æ–∫–µ–Ω –∏–∑ env –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || process.argv[2];
if (!BOT_TOKEN) {
  console.error('‚ùå –ù—É–∂–µ–Ω TELEGRAM_BOT_TOKEN: –ª–∏–±–æ –≤ .env, –ª–∏–±–æ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç');
  console.error('   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node pilot_distribution.js [BOT_TOKEN]');
  process.exit(1);
}
const bot = new Telegraf(BOT_TOKEN);

const BATCH_SIZE = 500; // –ü–∏–ª–æ—Ç –Ω–∞ 500 —á–µ–ª–æ–≤–µ–∫
const CODES_PER_USER = 3;
const RATE_LIMIT_MS = 40; // 25 msg/sec = 1 msg / 40ms

async function pilotDistribution() {
  console.log('üöÄ –ü–ò–õ–û–¢–ù–ê–Ø –†–ê–ó–î–ê–ß–ê');
  console.log(`   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${BATCH_SIZE} —á–µ–ª–æ–≤–µ–∫`);
  console.log(`   –ö–æ–¥–æ–≤ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞: ${CODES_PER_USER}`);
  console.log(`   –í—Å–µ–≥–æ –Ω—É–∂–Ω–æ: ${BATCH_SIZE * CODES_PER_USER} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n`);
  
  try {
    // 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã (–∏—Å–∫–ª—é—á–∞—è —Å –∂–∞–ª–æ–±–∞–º–∏)
    console.log('üì¶ –°–æ–±–∏—Ä–∞—é –∫–æ–¥—ã –∏–∑ –ø—É–ª–∞...');
    const poolSnap = await db.collection('invite_pool').get();
    const allCodes = new Set();
    poolSnap.forEach(doc => allCodes.add(doc.data().code));
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–¥—ã —Å –∂–∞–ª–æ–±–∞–º–∏
    console.log('üö´ –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥—ã —Å –∂–∞–ª–æ–±–∞–º–∏...');
    const usersSnap = await db.collection('users').get();
    const complainedCodes = new Set();
    usersSnap.forEach(doc => {
      const data = doc.data();
      if (data.invalid_codes_reported) {
        data.invalid_codes_reported.forEach(code => complainedCodes.add(code));
      }
    });
    
    // –ß–∏—Å—Ç—ã–µ –∫–æ–¥—ã
    const cleanCodes = Array.from(allCodes).filter(code => !complainedCodes.has(code));
    console.log(`   –í—Å–µ–≥–æ –∫–æ–¥–æ–≤: ${allCodes.size}`);
    console.log(`   –° –∂–∞–ª–æ–±–∞–º–∏: ${complainedCodes.size}`);
    console.log(`   –ß–∏—Å—Ç—ã—Ö: ${cleanCodes.length}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${cleanCodes.length * 4}\n`);
    
    const needed = BATCH_SIZE * CODES_PER_USER;
    if (cleanCodes.length * 4 < needed) {
      console.log(`‚ùå –ù–ï –•–í–ê–¢–ê–ï–¢ –ö–û–î–û–í!`);
      console.log(`   –ù—É–∂–Ω–æ: ${needed}`);
      console.log(`   –ï—Å—Ç—å: ${cleanCodes.length * 4}`);
      process.exit(1);
    }
    
    // 2. –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã—Ö N –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    console.log('üë• –ü–æ–ª—É—á–∞—é –æ—á–µ—Ä–µ–¥—å...');
    const queueSnap = await db.collection('queue')
      .orderBy('position', 'asc')
      .limit(BATCH_SIZE)
      .get();
    
    if (queueSnap.size < BATCH_SIZE) {
      console.log(`‚ö†Ô∏è –í –æ—á–µ—Ä–µ–¥–∏ —Ç–æ–ª—å–∫–æ ${queueSnap.size} —á–µ–ª–æ–≤–µ–∫ (–Ω—É–∂–Ω–æ ${BATCH_SIZE})`);
      const proceed = await question(`–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å ${queueSnap.size}? (y/n): `);
      if (proceed.toLowerCase() !== 'y') {
        console.log('–û—Ç–º–µ–Ω–µ–Ω–æ');
        process.exit(0);
      }
    }
    
    const queueUsers = [];
    queueSnap.forEach(doc => queueUsers.push(doc.data()));
    console.log(`   –ì–æ—Ç–æ–≤–æ: ${queueUsers.length} —á–µ–ª–æ–≤–µ–∫\n`);
    
    // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞–∑–¥–∞—á–∏
    console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –∫–æ–¥—ã...');
    const distribution = [];
    let codeIdx = 0;
    
    for (let i = 0; i < queueUsers.length; i++) {
      const userCodes = [];
      for (let j = 0; j < CODES_PER_USER; j++) {
        if (codeIdx >= cleanCodes.length) {
          // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥—ã –ø–æ 2-4 —Ä–∞–∑–∞)
          codeIdx = 0;
        }
        userCodes.push(cleanCodes[codeIdx]);
        codeIdx++;
      }
      distribution.push({
        telegram_id: queueUsers[i].telegram_id,
        codes: userCodes
      });
    }
    
    console.log(`   –†–∞–∑–¥–∞—á–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞: ${distribution.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–µ–π—á–∞—Å –Ω–∞—á–Ω—ë—Ç—Å—è –º–∞—Å—Å–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞!');
    console.log(`   –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${distribution.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    console.log(`   –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${Math.round(distribution.length * RATE_LIMIT_MS / 1000 / 60)} –º–∏–Ω—É—Ç\n`);
    
    const confirm = await question('–ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É? (yes/no): ');
    if (confirm.toLowerCase() !== 'yes') {
      console.log('–û—Ç–º–µ–Ω–µ–Ω–æ');
      process.exit(0);
    }
    
    // 4. –†–ê–ó–î–ê–ß–ê
    console.log('\nüöÄ –ù–ê–ß–ò–ù–ê–Æ –†–ê–ó–î–ê–ß–£...\n');
    let sent = 0;
    let failed = 0;
    
    for (const item of distribution) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —è–∑—ã–∫–∞
        const userDoc = await db.collection('users').doc(item.telegram_id).get();
        if (!userDoc.exists) {
          console.log(`‚ö†Ô∏è  User ${item.telegram_id} not found, skipping`);
          failed++;
          continue;
        }
        
        const userData = userDoc.data();
        const lang = userData.language || 'ru';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const codesList = item.codes.map((c, i) => `${i + 1}Ô∏è‚É£ \`${c}\``).join('\n');
        const message = lang === 'en'
          ? `üéâ **Your Sora invite codes:**\n\n${codesList}\n\n**What to do:**\n1. Try codes one by one on sora.com (need US VPN üá∫üá∏)\n2. One will work ‚Äî mark it with ‚úÖ\n3. After registration, come back and send your Sora code\n\n‚ö†Ô∏è **Video generation access is locked until you mark results.**\n\nMark result for each code:`
          : `üéâ **–¢–≤–æ–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—ã –¥–ª—è Sora:**\n\n${codesList}\n\n**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n1. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ sora.com (–Ω—É–∂–µ–Ω VPN üá∫üá∏)\n2. –û–¥–∏–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ—Ç–º–µ—Ç—å –µ–≥–æ –∫–Ω–æ–ø–∫–æ–π ‚úÖ\n3. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–¥ –∏–∑ Sora\n\n‚ö†Ô∏è **–ü–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—Ç–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∑–∞–∫—Ä—ã—Ç.**\n\n–û—Ç–º–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞:`;
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞ + "–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–∏ –æ–¥–∏–Ω"
        const buttons = item.codes.map(code => [
          { text: `‚úÖ ${code}`, callback_data: `mark_used_${code}` },
          { text: `‚Ü©Ô∏è ${code}`, callback_data: `mark_unused_${code}` },
          { text: `üö´ ${code}`, callback_data: `mark_invalid_${code}` }
        ]);
        buttons.push([{ text: 'ü§∑ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–∏ –æ–¥–∏–Ω', callback_data: 'mark_none_used' }]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        await bot.telegram.sendMessage(item.telegram_id, message, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: buttons }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        const invites = item.codes.map(code => ({
          code,
          sent_at: new Date(),
          status: 'pending'
        }));
        
        await db.collection('users').doc(item.telegram_id).update({
          invites_pending: invites,
          migration_batch: true,
          access_locked: true,
          status: 'received'
        });
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        await db.collection('queue').doc(item.telegram_id).delete();
        
        sent++;
        
        if (sent % 50 === 0) {
          console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}/${distribution.length}`);
        }
        
        // Rate limit
        await new Promise(r => setTimeout(r, RATE_LIMIT_MS));
        
      } catch (error) {
        failed++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${item.telegram_id}:`, error.message);
      }
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    console.log('\nüîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏...');
    const remainingQueue = await db.collection('queue')
      .orderBy('joined_at', 'asc')
      .get();
    
    const batch = db.batch();
    remainingQueue.docs.forEach((doc, index) => {
      batch.update(doc.ref, { position: index + 1 });
    });
    if (!remainingQueue.empty) await batch.commit();
    
    console.log('\n‚úÖ –†–ê–ó–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log(`   –£—Å–ø–µ—à–Ω–æ: ${sent}`);
    console.log(`   –û—à–∏–±–æ–∫: ${failed}`);
    console.log(`   –û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: ${remainingQueue.size}\n`);
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  } finally {
    process.exit(0);
  }
}

import readline from 'readline';

function question(query) {
  return new Promise(resolve => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.question(query, answer => {
      rl.close();
      resolve(answer);
    });
  });
}

pilotDistribution();

