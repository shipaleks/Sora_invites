import admin from 'firebase-admin';
import { readFileSync } from 'fs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º credentials
const serviceAccount = JSON.parse(
  readFileSync('./sora-invite-bot-firebase-adminsdk-fbsvc-cb61b27933.json', 'utf8')
);

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function analyze() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    // 1. INVITE POOL
    console.log('üì¶ INVITE POOL:');
    const poolSnap = await db.collection('invite_pool').get();
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${poolSnap.size}`);
    
    const poolData = {
      available: 0,
      sent: 0,
      uniqueCodes: new Set(),
      withComplaints: new Set(),
      bySubmitter: {}
    };
    
    poolSnap.forEach(doc => {
      const data = doc.data();
      poolData.uniqueCodes.add(data.code);
      
      if (data.status === 'available') poolData.available++;
      if (data.status === 'sent') poolData.sent++;
      
      const submitter = data.submitted_by || 'unknown';
      poolData.bySubmitter[submitter] = (poolData.bySubmitter[submitter] || 0) + 1;
    });
    
    console.log(`   Available: ${poolData.available}`);
    console.log(`   Sent: ${poolData.sent}`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: ${poolData.uniqueCodes.size}`);
    console.log(`   –¢–æ–ø-5 contributors:`);
    const topContributors = Object.entries(poolData.bySubmitter)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
    topContributors.forEach(([sub, count]) => {
      console.log(`      ${sub}: ${count}`);
    });
    
    // 2. QUEUE
    console.log('\nüë• –û–ß–ï–†–ï–î–¨:');
    const queueSnap = await db.collection('queue').get();
    console.log(`   –ß–µ–ª–æ–≤–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏: ${queueSnap.size}`);
    
    if (queueSnap.size > 0) {
      const positions = [];
      queueSnap.forEach(doc => positions.push(doc.data().position));
      console.log(`   –ü–æ–∑–∏—Ü–∏–∏: –æ—Ç ${Math.min(...positions)} –¥–æ ${Math.max(...positions)}`);
    }
    
    // 3. USERS
    console.log('\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
    const usersSnap = await db.collection('users').get();
    console.log(`   –í—Å–µ–≥–æ: ${usersSnap.size}`);
    
    const userData = {
      byStatus: {},
      withInvites: 0,
      withComplaints: 0,
      banned: 0,
      totalComplaints: 0,
      codesReturned: { 0: 0, 1: 0 },
      usageShared: { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0 },
      allComplainedCodes: new Set()
    };
    
    usersSnap.forEach(doc => {
      const data = doc.data();
      
      // –°—Ç–∞—Ç—É—Å—ã
      const status = data.status || 'unknown';
      userData.byStatus[status] = (userData.byStatus[status] || 0) + 1;
      
      // –ò–Ω–≤–∞–π—Ç—ã
      if (data.invite_code_given) userData.withInvites++;
      
      // –ñ–∞–ª–æ–±—ã
      if (data.invalid_codes_reported && data.invalid_codes_reported.length > 0) {
        userData.withComplaints++;
        userData.totalComplaints += data.invalid_codes_reported.length;
        data.invalid_codes_reported.forEach(code => userData.allComplainedCodes.add(code));
      }
      
      // –ë–∞–Ω—ã
      if (data.is_banned) userData.banned++;
      
      // –í–æ–∑–≤—Ä–∞—Ç—ã
      const returned = data.codes_returned || 0;
      userData.codesReturned[returned] = (userData.codesReturned[returned] || 0) + 1;
      
      // Usage shared
      const shared = data.usage_count_shared || 0;
      userData.usageShared[shared] = (userData.usageShared[shared] || 0) + 1;
    });
    
    console.log(`   –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:`);
    Object.entries(userData.byStatus).forEach(([status, count]) => {
      console.log(`      ${status}: ${count}`);
    });
    console.log(`   –ü–æ–ª—É—á–∏–ª–∏ –∏–Ω–≤–∞–π—Ç: ${userData.withInvites}`);
    console.log(`   –ñ–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ –∫–æ–¥—ã: ${userData.withComplaints} (–≤—Å–µ–≥–æ –∂–∞–ª–æ–±: ${userData.totalComplaints})`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å –∂–∞–ª–æ–±–∞–º–∏: ${userData.allComplainedCodes.size}`);
    console.log(`   –ó–∞–±–∞–Ω–µ–Ω–æ: ${userData.banned}`);
    console.log(`   –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫–æ–¥–æ–≤ (0/1): ${userData.codesReturned[0]}/${userData.codesReturned[1]}`);
    console.log(`   –ü–æ–¥–µ–ª–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏:`);
    Object.entries(userData.usageShared).forEach(([count, users]) => {
      if (parseInt(count) > 0) console.log(`      ${count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${users} —á–µ–ª`);
    });
    
    // 4. –†–ê–°–ß–Å–¢ –ü–û–¢–ï–ù–¶–ò–ê–õ–ê
    console.log('\nüí° –ü–û–¢–ï–ù–¶–ò–ê–õ –î–õ–Ø –ë–û–õ–¨–®–û–ô –†–ê–ó–î–ê–ß–ò:');
    
    // –ö–æ–¥—ã –ë–ï–ó –∂–∞–ª–æ–±
    const cleanCodes = Array.from(poolData.uniqueCodes).filter(
      code => !userData.allComplainedCodes.has(code)
    );
    console.log(`   –ß–∏—Å—Ç—ã—Ö –∫–æ–¥–æ–≤ (–±–µ–∑ –∂–∞–ª–æ–±): ${cleanCodes.length}`);
    console.log(`   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ: ${cleanCodes.length} √ó 4 = ${cleanCodes.length * 4} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`);
    
    // –°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
    console.log(`   –õ—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏: ${queueSnap.size}`);
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π: –ø–æ 2 –∏–Ω–≤–∞–π—Ç–∞ –∫–∞–∂–¥–æ–º—É
    const needed = queueSnap.size * 2;
    const available = cleanCodes.length * 4;
    console.log(`   –î–ª—è —Ä–∞–∑–¥–∞—á–∏ –ø–æ 2: –Ω—É–∂–Ω–æ ${needed}, –µ—Å—Ç—å ${available}`);
    
    if (available >= needed) {
      console.log(`   ‚úÖ –î–û–°–¢–ê–¢–û–ß–ù–û! –û—Å—Ç–∞–Ω–µ—Ç—Å—è: ${available - needed}`);
    } else {
      console.log(`   ‚ùå –ù–ï –•–í–ê–¢–ò–¢. –î–µ—Ñ–∏—Ü–∏—Ç: ${needed - available}`);
      const canGive = Math.floor(available / queueSnap.size);
      console.log(`   –ú–æ–∂–µ–º –¥–∞—Ç—å –ø–æ ${canGive} –∏–Ω–≤–∞–π—Ç–∞ –∫–∞–∂–¥–æ–º—É`);
    }
    
    // 5. –¢–û–ü-10 –ö–û–î–û–í –° –ñ–ê–õ–û–ë–ê–ú–ò
    if (userData.allComplainedCodes.size > 0) {
      console.log('\nüö´ –ö–û–î–´ –° –ñ–ê–õ–û–ë–ê–ú–ò:');
      const complaintCounts = {};
      usersSnap.forEach(doc => {
        const data = doc.data();
        if (data.invalid_codes_reported) {
          data.invalid_codes_reported.forEach(code => {
            complaintCounts[code] = (complaintCounts[code] || 0) + 1;
          });
        }
      });
      
      const topComplaints = Object.entries(complaintCounts)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10);
      
      topComplaints.forEach(([code, count]) => {
        console.log(`   ${code}: ${count} –∂–∞–ª–æ–±`);
      });
    }
    
    // 6. SETTINGS
    console.log('\n‚öôÔ∏è SETTINGS:');
    const settingsSnap = await db.collection('settings').doc('system').get();
    if (settingsSnap.exists) {
      console.log('   ', settingsSnap.data());
    } else {
      console.log('   –ù–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    process.exit(0);
  }
}

analyze();

