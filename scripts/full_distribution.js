import admin from 'firebase-admin';
import { readFileSync } from 'fs';
import { Telegraf } from 'telegraf';
import readline from 'readline';

// –ó–∞–≥—Ä—É–∂–∞–µ–º credentials
const serviceAccount = JSON.parse(
  readFileSync('./sora-invite-bot-firebase-adminsdk-fbsvc-cb61b27933.json', 'utf8')
);

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

const BOT_TOKEN = process.argv[2];
if (!BOT_TOKEN) {
  console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node full_distribution.js BOT_TOKEN');
  process.exit(1);
}
const bot = new Telegraf(BOT_TOKEN);

const CODES_PER_USER = 3;
const RATE_LIMIT_MS = 40; // 25 msg/sec

async function fullDistribution() {
  console.log('üöÄ –ü–û–õ–ù–ê–Ø –†–ê–ó–î–ê–ß–ê –í–°–ï–ú –û–°–¢–ê–í–®–ò–ú–°–Ø\n');
  
  try {
    // 1. –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã
    console.log('üì¶ –°–æ–±–∏—Ä–∞—é –≤—Å–µ –∫–æ–¥—ã...');
    const poolSnap = await db.collection('invite_pool').get();
    const allCodes = new Set();
    poolSnap.forEach(doc => allCodes.add(doc.data().code));
    console.log(`   –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: ${allCodes.size}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${allCodes.size * 4}\n`);
    
    // 2. –í—Å—è –æ—á–µ—Ä–µ–¥—å
    console.log('üë• –ü–æ–ª—É—á–∞—é –≤—Å—é –æ—á–µ—Ä–µ–¥—å...');
    const queueSnap = await db.collection('queue')
      .orderBy('position', 'asc')
      .get();
    
    const queueUsers = [];
    queueSnap.forEach(doc => queueUsers.push(doc.data()));
    console.log(`   –í –æ—á–µ—Ä–µ–¥–∏: ${queueUsers.length} —á–µ–ª–æ–≤–µ–∫\n`);
    
    // 3. –†–∞—Å—á—ë—Ç —Ä–∞–∑–¥–∞—á–∏
    const totalCodes = allCodes.size * 4;
    const canDistribute = Math.floor(totalCodes / CODES_PER_USER);
    const willDistribute = Math.min(canDistribute, queueUsers.length);
    
    console.log('üìä –ü–õ–ê–ù:');
    console.log(`   –ú–æ–∂–µ–º —Ä–∞–∑–¥–∞—Ç—å: ${canDistribute} —á–µ–ª–æ–≤–µ–∫ (–ø–æ ${CODES_PER_USER} –∫–æ–¥–∞)`);
    console.log(`   –†–∞–∑–¥–∞–¥–∏–º: ${willDistribute} —á–µ–ª–æ–≤–µ–∫`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ–¥–æ–≤: ${willDistribute * CODES_PER_USER}`);
    console.log(`   –û—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${queueUsers.length - willDistribute}`);
    console.log(`   –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${Math.round(willDistribute * RATE_LIMIT_MS / 1000 / 60)} –º–∏–Ω—É—Ç\n`);
    
    const confirm = await question('üö® –ù–ê–ß–ê–¢–¨ –ü–û–õ–ù–£–Æ –†–ê–ó–î–ê–ß–£? (yes/no): ');
    if (confirm.toLowerCase() !== 'yes') {
      console.log('–û—Ç–º–µ–Ω–µ–Ω–æ');
      process.exit(0);
    }
    
    // 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤
    console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –∫–æ–¥—ã...');
    const codesArray = Array.from(allCodes);
    const distribution = [];
    let codeIdx = 0;
    
    for (let i = 0; i < willDistribute; i++) {
      const userCodes = [];
      for (let j = 0; j < CODES_PER_USER; j++) {
        userCodes.push(codesArray[codeIdx % codesArray.length]);
        codeIdx++;
      }
      distribution.push({
        telegram_id: queueUsers[i].telegram_id,
        codes: userCodes
      });
    }
    
    console.log(`   –ì–æ—Ç–æ–≤–æ: ${distribution.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);
    
    // 5. –†–ê–ó–î–ê–ß–ê
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–Æ –†–ê–ó–î–ê–ß–£...\n');
    let sent = 0;
    let blocked = 0;
    let errors = 0;
    
    for (const item of distribution) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —è–∑—ã–∫–∞
        const userDoc = await db.collection('users').doc(item.telegram_id).get();
        if (!userDoc.exists) {
          errors++;
          continue;
        }
        
        const userData = userDoc.data();
        const lang = userData.language || 'ru';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const codesList = item.codes.map((c, i) => `${i + 1}Ô∏è‚É£ \`${c}\``).join('\n');
        const message = lang === 'en'
          ? `üéâ **Your Sora invite codes:**\n\n${codesList}\n\n**What to do:**\n1. Try codes one by one on sora.com (need US VPN üá∫üá∏)\n2. One will work ‚Äî mark it with ‚úÖ\n3. After registration, come back and send your Sora code\n\n‚ö†Ô∏è **Video generation access is locked until you mark results.**\n\nMark result for each code:`
          : `üéâ **–¢–≤–æ–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥—ã –¥–ª—è Sora:**\n\n${codesList}\n\n**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n1. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ sora.com (–Ω—É–∂–µ–Ω VPN üá∫üá∏)\n2. –û–¥–∏–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ—Ç–º–µ—Ç—å –µ–≥–æ –∫–Ω–æ–ø–∫–æ–π ‚úÖ\n3. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–¥ –∏–∑ Sora\n\n‚ö†Ô∏è **–ü–æ–∫–∞ –Ω–µ –æ—Ç–º–µ—Ç–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∑–∞–∫—Ä—ã—Ç.**\n\n–û—Ç–º–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞:`;
        
        // –ö–Ω–æ–ø–∫–∏
        const buttons = item.codes.map(code => [
          { text: `‚úÖ ${code}`, callback_data: `mark_used_${code}` },
          { text: `‚Ü©Ô∏è ${code}`, callback_data: `mark_unused_${code}` },
          { text: `üö´ ${code}`, callback_data: `mark_invalid_${code}` }
        ]);
        buttons.push([{ text: 'ü§∑ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–∏ –æ–¥–∏–Ω', callback_data: 'mark_none_used' }]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
        await bot.telegram.sendMessage(item.telegram_id, message, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: buttons }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
        const invites = item.codes.map(code => ({
          code,
          sent_at: new Date(),
          status: 'pending'
        }));
        
        await db.collection('users').doc(item.telegram_id).update({
          invites_pending: invites,
          migration_batch: true,
          access_locked: true,
          status: 'received'
        });
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        await db.collection('queue').doc(item.telegram_id).delete();
        
        sent++;
        
        if (sent % 100 === 0) {
          console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}/${willDistribute} (blocked: ${blocked}, errors: ${errors})`);
        }
        
        await new Promise(r => setTimeout(r, RATE_LIMIT_MS));
        
      } catch (error) {
        if (error.response?.error_code === 403) {
          blocked++;
          // –í—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –≤ –ë–î (–Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏)
          try {
            const invites = item.codes.map(code => ({
              code,
              sent_at: new Date(),
              status: 'pending'
            }));
            await db.collection('users').doc(item.telegram_id).update({
              invites_pending: invites,
              migration_batch: true,
              access_locked: true
            });
          } catch {}
        } else {
          errors++;
          console.error(`‚ùå ${item.telegram_id}:`, error.message);
        }
      }
    }
    
    // 6. –ü–µ—Ä–µ—Å—á—ë—Ç –æ—á–µ—Ä–µ–¥–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö –∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è)
    console.log('\nüîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å...');
    const remainingSnap = await db.collection('queue')
      .orderBy('joined_at', 'asc')
      .get();
    
    if (!remainingSnap.empty) {
      const batch = db.batch();
      let count = 0;
      remainingSnap.forEach((doc, idx) => {
        batch.update(doc.ref, { position: idx + 1 });
        count++;
        if (count >= 400) {
          batch.commit().catch(() => {});
          count = 0;
        }
      });
      if (count > 0) {
        try {
          await batch.commit();
        } catch (e) {
          console.warn('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', e.message);
        }
      }
    }
    
    console.log('\n‚úÖ –ü–û–õ–ù–ê–Ø –†–ê–ó–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log(`   –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}`);
    console.log(`   Blocked (403): ${blocked}`);
    console.log(`   –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: ${errors}`);
    console.log(`   –û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: ${remainingSnap.size}\n`);
    
    console.log('üìä –ò–¢–û–ì–û:');
    console.log(`   –†–∞–∑–¥–∞–Ω–æ –∫–æ–¥–æ–≤: ${sent * CODES_PER_USER}`);
    console.log(`   –ß–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∏–ª–∏: ${sent}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: ~${Math.round(sent * 0.3)} (30%)\n`);
    
    console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:');
    console.log('   node scripts/pilot_monitor.js\n');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  } finally {
    process.exit(0);
  }
}

function question(query) {
  return new Promise(resolve => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.question(query, answer => {
      rl.close();
      resolve(answer);
    });
  });
}

fullDistribution();

