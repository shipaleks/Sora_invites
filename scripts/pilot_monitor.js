import admin from 'firebase-admin';
import { readFileSync } from 'fs';

const serviceAccount = JSON.parse(
  readFileSync('./sora-invite-bot-firebase-adminsdk-fbsvc-cb61b27933.json', 'utf8')
);

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function monitorPilot() {
  console.log('üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ò–õ–û–¢–ù–û–ô –†–ê–ó–î–ê–ß–ò\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–∑ migration_batch
    const pilotUsers = await db.collection('users')
      .where('migration_batch', '==', true)
      .get();
    
    console.log(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∏–ª–æ—Ç–∞: ${pilotUsers.size}\n`);
    
    const stats = {
      total: pilotUsers.size,
      responded: 0,
      notResponded: 0,
      marked: {
        used: 0,
        returned: 0,
        invalid: 0,
        pending: 0
      },
      codesReturned: 0,
      accessUnlocked: 0,
      byResponseTime: {
        '0-1h': 0,
        '1-3h': 0,
        '3-6h': 0,
        '6-12h': 0,
        '12-24h': 0,
        '24h+': 0
      }
    };
    
    const now = new Date();
    
    pilotUsers.forEach(doc => {
      const data = doc.data();
      const invites = data.invites_pending || [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ —Ö–æ—Ç—å –Ω–∞ –æ–¥–∏–Ω –∫–æ–¥
      const hasResponded = invites.some(inv => inv.status !== 'pending');
      if (hasResponded) {
        stats.responded++;
        
        // –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        const firstMark = invites.find(inv => inv.marked_at);
        if (firstMark) {
          const sentAt = invites[0]?.sent_at?.toDate?.() || new Date(invites[0]?.sent_at || now);
          const markedAt = firstMark.marked_at?.toDate?.() || new Date(firstMark.marked_at);
          const hours = (markedAt - sentAt) / (1000 * 60 * 60);
          
          if (hours < 1) stats.byResponseTime['0-1h']++;
          else if (hours < 3) stats.byResponseTime['1-3h']++;
          else if (hours < 6) stats.byResponseTime['3-6h']++;
          else if (hours < 12) stats.byResponseTime['6-12h']++;
          else if (hours < 24) stats.byResponseTime['12-24h']++;
          else stats.byResponseTime['24h+']++;
        }
      } else {
        stats.notResponded++;
      }
      
      // –°—Ç–∞—Ç—É—Å—ã –∫–æ–¥–æ–≤
      invites.forEach(inv => {
        stats.marked[inv.status] = (stats.marked[inv.status] || 0) + 1;
      });
      
      // –í–µ—Ä–Ω—É–ª –ª–∏ –∫–æ–¥—ã –∏–∑ Sora
      if (data.codes_returned > 0) {
        stats.codesReturned++;
      }
      
      // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥–æ—Å—Ç—É–ø
      if (!data.access_locked) {
        stats.accessUnlocked++;
      }
    });
    
    // –í—ã–≤–æ–¥
    console.log('üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log(`   –û—Ç–≤–µ—Ç–∏–ª–∏: ${stats.responded}/${stats.total} (${Math.round(stats.responded / stats.total * 100)}%)`);
    console.log(`   –ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: ${stats.notResponded}\n`);
    
    console.log('üìä –û–¢–ú–ï–¢–ö–ò –ö–û–î–û–í:');
    console.log(`   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª: ${stats.marked.used || 0}`);
    console.log(`   ‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª: ${stats.marked.returned || 0}`);
    console.log(`   üö´ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${stats.marked.invalid || 0}`);
    console.log(`   ‚è≥ –ï—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª: ${stats.marked.pending || 0}\n`);
    
    console.log('üéÅ –í–û–ó–í–†–ê–¢–´:');
    console.log(`   –í–µ—Ä–Ω—É–ª–∏ –∫–æ–¥ –∏–∑ Sora: ${stats.codesReturned}/${stats.total} (${Math.round(stats.codesReturned / stats.total * 100)}%)`);
    console.log(`   –î–æ—Å—Ç—É–ø —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${stats.accessUnlocked}/${stats.total} (${Math.round(stats.accessUnlocked / stats.total * 100)}%)\n`);
    
    console.log('‚è± –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê:');
    Object.entries(stats.byResponseTime).forEach(([range, count]) => {
      if (count > 0) {
        console.log(`   ${range}: ${count} —á–µ–ª (${Math.round(count / stats.responded * 100)}%)`);
      }
    });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    const responseRate = stats.responded / stats.total;
    const returnRate = stats.codesReturned / stats.total;
    
    if (responseRate > 0.6 && returnRate > 0.4) {
      console.log('   ‚úÖ –û–¢–õ–ò–ß–ù–û! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—É—é —Ä–∞–∑–¥–∞—á—É.');
    } else if (responseRate > 0.4 && returnRate > 0.2) {
      console.log('   üü° –°–†–ï–î–ù–ï. –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö 1000.');
    } else {
      console.log('   üî¥ –ü–õ–û–•–û. –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–æ–¥—Ö–æ–¥.');
    }
    
    console.log(`\n   Response rate: ${Math.round(responseRate * 100)}% (—Ü–µ–ª—å: >60%)`);
    console.log(`   Return rate: ${Math.round(returnRate * 100)}% (—Ü–µ–ª—å: >40%)\n`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    process.exit(0);
  }
}

monitorPilot();

